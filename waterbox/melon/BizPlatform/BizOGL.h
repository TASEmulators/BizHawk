// Based on glad.h in melonDS/src/frontend/glad

#ifndef BIZOGL_H
#define BIZOGL_H

#ifdef __gl_h_
#error OpenGL header already included, remove this include, BizOGL already provides it
#endif

#define __gl_h_

#include <stdint.h>
#include <utility>

namespace BizOGL
{

using LoadGLProc = void* (*)(const char* proc);

enum class LoadGLVersion
{
	V3_1,
	V3_2,
	V4_3,
};

void LoadGL(LoadGLProc load, LoadGLVersion version, bool isWinApi);

extern bool IsWinAPI;

template<class T>
class GLFunctor;

template<class Result, class... Args>
class GLFunctor<Result (Args...)>
{
	using GLFunc = Result (*)(Args...);

public:
	explicit operator bool() const
	{
		return glProc != nullptr;
	}

	Result operator()(Args... args) const
	{
		if (IsWinAPI)
		{
			// doing __attribute__((ms_abi)) GLFunc; instead will crash clang on compilation
			// https://github.com/llvm/llvm-project/issues/148325
			using WinAPIGLFunc = __attribute__((ms_abi)) Result (*)(Args...);
			return reinterpret_cast<WinAPIGLFunc>(glProc)(std::forward<Args>(args)...);
		}

		return glProc(std::forward<Args>(args)...);
	}

	GLFunc& operator=(void* proc)
	{
		glProc = reinterpret_cast<GLFunc>(proc);
		return glProc;
	}

	bool operator==(const GLFunc& proc) const
	{
		return glProc == proc;
	}

	bool operator!=(const std::nullptr_t& nullptr_) const
	{
		return glProc != nullptr_;
	}

private:
	GLFunc glProc = nullptr;
};

}

typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef void GLvoid;
typedef int8_t GLbyte;
typedef uint8_t GLubyte;
typedef int16_t GLshort;
typedef uint16_t GLushort;
typedef int GLint;
typedef unsigned int GLuint;
typedef int32_t GLclampx;
typedef int GLsizei;
typedef float GLfloat;
typedef float GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void * GLeglClientBufferEXT;
typedef void * GLeglImageOES;
typedef char GLchar;
typedef char GLcharARB;
typedef unsigned int GLhandleARB;
typedef uint16_t GLhalf;
typedef uint16_t GLhalfARB;
typedef int32_t GLfixed;
typedef intptr_t GLintptr;
typedef intptr_t GLintptrARB;
typedef intptr_t GLsizeiptr;
typedef intptr_t GLsizeiptrARB;
typedef int64_t GLint64;
typedef int64_t GLint64EXT;
typedef uint64_t GLuint64;
typedef uint64_t GLuint64EXT;
typedef struct __GLsync * GLsync;

typedef void (*GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);

#define GL_DEPTH_BUFFER_BIT 0x00000100
#define GL_STENCIL_BUFFER_BIT 0x00000400
#define GL_COLOR_BUFFER_BIT 0x00004000
#define GL_FALSE 0
#define GL_TRUE 1
#define GL_POINTS 0x0000
#define GL_LINES 0x0001
#define GL_LINE_LOOP 0x0002
#define GL_LINE_STRIP 0x0003
#define GL_TRIANGLES 0x0004
#define GL_TRIANGLE_STRIP 0x0005
#define GL_TRIANGLE_FAN 0x0006
#define GL_NEVER 0x0200
#define GL_LESS 0x0201
#define GL_EQUAL 0x0202
#define GL_LEQUAL 0x0203
#define GL_GREATER 0x0204
#define GL_NOTEQUAL 0x0205
#define GL_GEQUAL 0x0206
#define GL_ALWAYS 0x0207
#define GL_ZERO 0
#define GL_ONE 1
#define GL_SRC_COLOR 0x0300
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#define GL_SRC_ALPHA 0x0302
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#define GL_DST_ALPHA 0x0304
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#define GL_DST_COLOR 0x0306
#define GL_ONE_MINUS_DST_COLOR 0x0307
#define GL_SRC_ALPHA_SATURATE 0x0308
#define GL_NONE 0
#define GL_FRONT_LEFT 0x0400
#define GL_FRONT_RIGHT 0x0401
#define GL_BACK_LEFT 0x0402
#define GL_BACK_RIGHT 0x0403
#define GL_FRONT 0x0404
#define GL_BACK 0x0405
#define GL_LEFT 0x0406
#define GL_RIGHT 0x0407
#define GL_FRONT_AND_BACK 0x0408
#define GL_NO_ERROR 0
#define GL_INVALID_ENUM 0x0500
#define GL_INVALID_VALUE 0x0501
#define GL_INVALID_OPERATION 0x0502
#define GL_OUT_OF_MEMORY 0x0505
#define GL_CW 0x0900
#define GL_CCW 0x0901
#define GL_POINT_SIZE 0x0B11
#define GL_POINT_SIZE_RANGE 0x0B12
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#define GL_LINE_SMOOTH 0x0B20
#define GL_LINE_WIDTH 0x0B21
#define GL_LINE_WIDTH_RANGE 0x0B22
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_POLYGON_MODE 0x0B40
#define GL_POLYGON_SMOOTH 0x0B41
#define GL_CULL_FACE 0x0B44
#define GL_CULL_FACE_MODE 0x0B45
#define GL_FRONT_FACE 0x0B46
#define GL_DEPTH_RANGE 0x0B70
#define GL_DEPTH_TEST 0x0B71
#define GL_DEPTH_WRITEMASK 0x0B72
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#define GL_DEPTH_FUNC 0x0B74
#define GL_STENCIL_TEST 0x0B90
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#define GL_STENCIL_FUNC 0x0B92
#define GL_STENCIL_VALUE_MASK 0x0B93
#define GL_STENCIL_FAIL 0x0B94
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#define GL_STENCIL_REF 0x0B97
#define GL_STENCIL_WRITEMASK 0x0B98
#define GL_VIEWPORT 0x0BA2
#define GL_DITHER 0x0BD0
#define GL_BLEND_DST 0x0BE0
#define GL_BLEND_SRC 0x0BE1
#define GL_BLEND 0x0BE2
#define GL_LOGIC_OP_MODE 0x0BF0
#define GL_DRAW_BUFFER 0x0C01
#define GL_READ_BUFFER 0x0C02
#define GL_SCISSOR_BOX 0x0C10
#define GL_SCISSOR_TEST 0x0C11
#define GL_COLOR_CLEAR_VALUE 0x0C22
#define GL_COLOR_WRITEMASK 0x0C23
#define GL_DOUBLEBUFFER 0x0C32
#define GL_STEREO 0x0C33
#define GL_LINE_SMOOTH_HINT 0x0C52
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#define GL_UNPACK_LSB_FIRST 0x0CF1
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#define GL_UNPACK_ALIGNMENT 0x0CF5
#define GL_PACK_SWAP_BYTES 0x0D00
#define GL_PACK_LSB_FIRST 0x0D01
#define GL_PACK_ROW_LENGTH 0x0D02
#define GL_PACK_SKIP_ROWS 0x0D03
#define GL_PACK_SKIP_PIXELS 0x0D04
#define GL_PACK_ALIGNMENT 0x0D05
#define GL_MAX_TEXTURE_SIZE 0x0D33
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#define GL_SUBPIXEL_BITS 0x0D50
#define GL_TEXTURE_1D 0x0DE0
#define GL_TEXTURE_2D 0x0DE1
#define GL_TEXTURE_WIDTH 0x1000
#define GL_TEXTURE_HEIGHT 0x1001
#define GL_TEXTURE_BORDER_COLOR 0x1004
#define GL_DONT_CARE 0x1100
#define GL_FASTEST 0x1101
#define GL_NICEST 0x1102
#define GL_BYTE 0x1400
#define GL_UNSIGNED_BYTE 0x1401
#define GL_SHORT 0x1402
#define GL_UNSIGNED_SHORT 0x1403
#define GL_INT 0x1404
#define GL_UNSIGNED_INT 0x1405
#define GL_FLOAT 0x1406
#define GL_CLEAR 0x1500
#define GL_AND 0x1501
#define GL_AND_REVERSE 0x1502
#define GL_COPY 0x1503
#define GL_AND_INVERTED 0x1504
#define GL_NOOP 0x1505
#define GL_XOR 0x1506
#define GL_OR 0x1507
#define GL_NOR 0x1508
#define GL_EQUIV 0x1509
#define GL_INVERT 0x150A
#define GL_OR_REVERSE 0x150B
#define GL_COPY_INVERTED 0x150C
#define GL_OR_INVERTED 0x150D
#define GL_NAND 0x150E
#define GL_SET 0x150F
#define GL_TEXTURE 0x1702
#define GL_COLOR 0x1800
#define GL_DEPTH 0x1801
#define GL_STENCIL 0x1802
#define GL_STENCIL_INDEX 0x1901
#define GL_DEPTH_COMPONENT 0x1902
#define GL_RED 0x1903
#define GL_GREEN 0x1904
#define GL_BLUE 0x1905
#define GL_ALPHA 0x1906
#define GL_RGB 0x1907
#define GL_RGBA 0x1908
#define GL_POINT 0x1B00
#define GL_LINE 0x1B01
#define GL_FILL 0x1B02
#define GL_KEEP 0x1E00
#define GL_REPLACE 0x1E01
#define GL_INCR 0x1E02
#define GL_DECR 0x1E03
#define GL_VENDOR 0x1F00
#define GL_RENDERER 0x1F01
#define GL_VERSION 0x1F02
#define GL_EXTENSIONS 0x1F03
#define GL_NEAREST 0x2600
#define GL_LINEAR 0x2601
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#define GL_TEXTURE_MAG_FILTER 0x2800
#define GL_TEXTURE_MIN_FILTER 0x2801
#define GL_TEXTURE_WRAP_S 0x2802
#define GL_TEXTURE_WRAP_T 0x2803
#define GL_REPEAT 0x2901
#define GL_COLOR_LOGIC_OP 0x0BF2
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#define GL_POLYGON_OFFSET_POINT 0x2A01
#define GL_POLYGON_OFFSET_LINE 0x2A02
#define GL_POLYGON_OFFSET_FILL 0x8037
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#define GL_TEXTURE_BINDING_1D 0x8068
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#define GL_TEXTURE_RED_SIZE 0x805C
#define GL_TEXTURE_GREEN_SIZE 0x805D
#define GL_TEXTURE_BLUE_SIZE 0x805E
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#define GL_DOUBLE 0x140A
#define GL_PROXY_TEXTURE_1D 0x8063
#define GL_PROXY_TEXTURE_2D 0x8064
#define GL_R3_G3_B2 0x2A10
#define GL_RGB4 0x804F
#define GL_RGB5 0x8050
#define GL_RGB8 0x8051
#define GL_RGB10 0x8052
#define GL_RGB12 0x8053
#define GL_RGB16 0x8054
#define GL_RGBA2 0x8055
#define GL_RGBA4 0x8056
#define GL_RGB5_A1 0x8057
#define GL_RGBA8 0x8058
#define GL_RGB10_A2 0x8059
#define GL_RGBA12 0x805A
#define GL_RGBA16 0x805B
#define GL_UNSIGNED_BYTE_3_3_2 0x8032
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#define GL_UNSIGNED_INT_8_8_8_8 0x8035
#define GL_UNSIGNED_INT_10_10_10_2 0x8036
#define GL_TEXTURE_BINDING_3D 0x806A
#define GL_PACK_SKIP_IMAGES 0x806B
#define GL_PACK_IMAGE_HEIGHT 0x806C
#define GL_UNPACK_SKIP_IMAGES 0x806D
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#define GL_TEXTURE_3D 0x806F
#define GL_PROXY_TEXTURE_3D 0x8070
#define GL_TEXTURE_DEPTH 0x8071
#define GL_TEXTURE_WRAP_R 0x8072
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#define GL_BGR 0x80E0
#define GL_BGRA 0x80E1
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#define GL_CLAMP_TO_EDGE 0x812F
#define GL_TEXTURE_MIN_LOD 0x813A
#define GL_TEXTURE_MAX_LOD 0x813B
#define GL_TEXTURE_BASE_LEVEL 0x813C
#define GL_TEXTURE_MAX_LEVEL 0x813D
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#define GL_TEXTURE0 0x84C0
#define GL_TEXTURE1 0x84C1
#define GL_TEXTURE2 0x84C2
#define GL_TEXTURE3 0x84C3
#define GL_TEXTURE4 0x84C4
#define GL_TEXTURE5 0x84C5
#define GL_TEXTURE6 0x84C6
#define GL_TEXTURE7 0x84C7
#define GL_TEXTURE8 0x84C8
#define GL_TEXTURE9 0x84C9
#define GL_TEXTURE10 0x84CA
#define GL_TEXTURE11 0x84CB
#define GL_TEXTURE12 0x84CC
#define GL_TEXTURE13 0x84CD
#define GL_TEXTURE14 0x84CE
#define GL_TEXTURE15 0x84CF
#define GL_TEXTURE16 0x84D0
#define GL_TEXTURE17 0x84D1
#define GL_TEXTURE18 0x84D2
#define GL_TEXTURE19 0x84D3
#define GL_TEXTURE20 0x84D4
#define GL_TEXTURE21 0x84D5
#define GL_TEXTURE22 0x84D6
#define GL_TEXTURE23 0x84D7
#define GL_TEXTURE24 0x84D8
#define GL_TEXTURE25 0x84D9
#define GL_TEXTURE26 0x84DA
#define GL_TEXTURE27 0x84DB
#define GL_TEXTURE28 0x84DC
#define GL_TEXTURE29 0x84DD
#define GL_TEXTURE30 0x84DE
#define GL_TEXTURE31 0x84DF
#define GL_ACTIVE_TEXTURE 0x84E0
#define GL_MULTISAMPLE 0x809D
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#define GL_SAMPLE_COVERAGE 0x80A0
#define GL_SAMPLE_BUFFERS 0x80A8
#define GL_SAMPLES 0x80A9
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#define GL_TEXTURE_CUBE_MAP 0x8513
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#define GL_COMPRESSED_RGB 0x84ED
#define GL_COMPRESSED_RGBA 0x84EE
#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
#define GL_TEXTURE_COMPRESSED 0x86A1
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#define GL_CLAMP_TO_BORDER 0x812D
#define GL_BLEND_DST_RGB 0x80C8
#define GL_BLEND_SRC_RGB 0x80C9
#define GL_BLEND_DST_ALPHA 0x80CA
#define GL_BLEND_SRC_ALPHA 0x80CB
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
#define GL_DEPTH_COMPONENT16 0x81A5
#define GL_DEPTH_COMPONENT24 0x81A6
#define GL_DEPTH_COMPONENT32 0x81A7
#define GL_MIRRORED_REPEAT 0x8370
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
#define GL_TEXTURE_LOD_BIAS 0x8501
#define GL_INCR_WRAP 0x8507
#define GL_DECR_WRAP 0x8508
#define GL_TEXTURE_DEPTH_SIZE 0x884A
#define GL_TEXTURE_COMPARE_MODE 0x884C
#define GL_TEXTURE_COMPARE_FUNC 0x884D
#define GL_BLEND_COLOR 0x8005
#define GL_BLEND_EQUATION 0x8009
#define GL_CONSTANT_COLOR 0x8001
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#define GL_CONSTANT_ALPHA 0x8003
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#define GL_FUNC_ADD 0x8006
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#define GL_FUNC_SUBTRACT 0x800A
#define GL_MIN 0x8007
#define GL_MAX 0x8008
#define GL_BUFFER_SIZE 0x8764
#define GL_BUFFER_USAGE 0x8765
#define GL_QUERY_COUNTER_BITS 0x8864
#define GL_CURRENT_QUERY 0x8865
#define GL_QUERY_RESULT 0x8866
#define GL_QUERY_RESULT_AVAILABLE 0x8867
#define GL_ARRAY_BUFFER 0x8892
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#define GL_ARRAY_BUFFER_BINDING 0x8894
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#define GL_READ_ONLY 0x88B8
#define GL_WRITE_ONLY 0x88B9
#define GL_READ_WRITE 0x88BA
#define GL_BUFFER_ACCESS 0x88BB
#define GL_BUFFER_MAPPED 0x88BC
#define GL_BUFFER_MAP_POINTER 0x88BD
#define GL_STREAM_DRAW 0x88E0
#define GL_STREAM_READ 0x88E1
#define GL_STREAM_COPY 0x88E2
#define GL_STATIC_DRAW 0x88E4
#define GL_STATIC_READ 0x88E5
#define GL_STATIC_COPY 0x88E6
#define GL_DYNAMIC_DRAW 0x88E8
#define GL_DYNAMIC_READ 0x88E9
#define GL_DYNAMIC_COPY 0x88EA
#define GL_SAMPLES_PASSED 0x8914
#define GL_SRC1_ALPHA 0x8589
#define GL_BLEND_EQUATION_RGB 0x8009
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#define GL_STENCIL_BACK_FUNC 0x8800
#define GL_STENCIL_BACK_FAIL 0x8801
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#define GL_MAX_DRAW_BUFFERS 0x8824
#define GL_DRAW_BUFFER0 0x8825
#define GL_DRAW_BUFFER1 0x8826
#define GL_DRAW_BUFFER2 0x8827
#define GL_DRAW_BUFFER3 0x8828
#define GL_DRAW_BUFFER4 0x8829
#define GL_DRAW_BUFFER5 0x882A
#define GL_DRAW_BUFFER6 0x882B
#define GL_DRAW_BUFFER7 0x882C
#define GL_DRAW_BUFFER8 0x882D
#define GL_DRAW_BUFFER9 0x882E
#define GL_DRAW_BUFFER10 0x882F
#define GL_DRAW_BUFFER11 0x8830
#define GL_DRAW_BUFFER12 0x8831
#define GL_DRAW_BUFFER13 0x8832
#define GL_DRAW_BUFFER14 0x8833
#define GL_DRAW_BUFFER15 0x8834
#define GL_BLEND_EQUATION_ALPHA 0x883D
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#define GL_FRAGMENT_SHADER 0x8B30
#define GL_VERTEX_SHADER 0x8B31
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
#define GL_MAX_VARYING_FLOATS 0x8B4B
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#define GL_SHADER_TYPE 0x8B4F
#define GL_FLOAT_VEC2 0x8B50
#define GL_FLOAT_VEC3 0x8B51
#define GL_FLOAT_VEC4 0x8B52
#define GL_INT_VEC2 0x8B53
#define GL_INT_VEC3 0x8B54
#define GL_INT_VEC4 0x8B55
#define GL_BOOL 0x8B56
#define GL_BOOL_VEC2 0x8B57
#define GL_BOOL_VEC3 0x8B58
#define GL_BOOL_VEC4 0x8B59
#define GL_FLOAT_MAT2 0x8B5A
#define GL_FLOAT_MAT3 0x8B5B
#define GL_FLOAT_MAT4 0x8B5C
#define GL_SAMPLER_1D 0x8B5D
#define GL_SAMPLER_2D 0x8B5E
#define GL_SAMPLER_3D 0x8B5F
#define GL_SAMPLER_CUBE 0x8B60
#define GL_SAMPLER_1D_SHADOW 0x8B61
#define GL_SAMPLER_2D_SHADOW 0x8B62
#define GL_DELETE_STATUS 0x8B80
#define GL_COMPILE_STATUS 0x8B81
#define GL_LINK_STATUS 0x8B82
#define GL_VALIDATE_STATUS 0x8B83
#define GL_INFO_LOG_LENGTH 0x8B84
#define GL_ATTACHED_SHADERS 0x8B85
#define GL_ACTIVE_UNIFORMS 0x8B86
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#define GL_ACTIVE_ATTRIBUTES 0x8B89
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#define GL_CURRENT_PROGRAM 0x8B8D
#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
#define GL_LOWER_LEFT 0x8CA1
#define GL_UPPER_LEFT 0x8CA2
#define GL_STENCIL_BACK_REF 0x8CA3
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
#define GL_PIXEL_PACK_BUFFER 0x88EB
#define GL_PIXEL_UNPACK_BUFFER 0x88EC
#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
#define GL_FLOAT_MAT2x3 0x8B65
#define GL_FLOAT_MAT2x4 0x8B66
#define GL_FLOAT_MAT3x2 0x8B67
#define GL_FLOAT_MAT3x4 0x8B68
#define GL_FLOAT_MAT4x2 0x8B69
#define GL_FLOAT_MAT4x3 0x8B6A
#define GL_SRGB 0x8C40
#define GL_SRGB8 0x8C41
#define GL_SRGB_ALPHA 0x8C42
#define GL_SRGB8_ALPHA8 0x8C43
#define GL_COMPRESSED_SRGB 0x8C48
#define GL_COMPRESSED_SRGB_ALPHA 0x8C49
#define GL_COMPARE_REF_TO_TEXTURE 0x884E
#define GL_CLIP_DISTANCE0 0x3000
#define GL_CLIP_DISTANCE1 0x3001
#define GL_CLIP_DISTANCE2 0x3002
#define GL_CLIP_DISTANCE3 0x3003
#define GL_CLIP_DISTANCE4 0x3004
#define GL_CLIP_DISTANCE5 0x3005
#define GL_CLIP_DISTANCE6 0x3006
#define GL_CLIP_DISTANCE7 0x3007
#define GL_MAX_CLIP_DISTANCES 0x0D32
#define GL_MAJOR_VERSION 0x821B
#define GL_MINOR_VERSION 0x821C
#define GL_NUM_EXTENSIONS 0x821D
#define GL_CONTEXT_FLAGS 0x821E
#define GL_COMPRESSED_RED 0x8225
#define GL_COMPRESSED_RG 0x8226
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
#define GL_RGBA32F 0x8814
#define GL_RGB32F 0x8815
#define GL_RGBA16F 0x881A
#define GL_RGB16F 0x881B
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
#define GL_CLAMP_READ_COLOR 0x891C
#define GL_FIXED_ONLY 0x891D
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#define GL_TEXTURE_1D_ARRAY 0x8C18
#define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#define GL_R11F_G11F_B10F 0x8C3A
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#define GL_RGB9_E5 0x8C3D
#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
#define GL_TEXTURE_SHARED_SIZE 0x8C3F
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#define GL_PRIMITIVES_GENERATED 0x8C87
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#define GL_RASTERIZER_DISCARD 0x8C89
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#define GL_INTERLEAVED_ATTRIBS 0x8C8C
#define GL_SEPARATE_ATTRIBS 0x8C8D
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#define GL_RGBA32UI 0x8D70
#define GL_RGB32UI 0x8D71
#define GL_RGBA16UI 0x8D76
#define GL_RGB16UI 0x8D77
#define GL_RGBA8UI 0x8D7C
#define GL_RGB8UI 0x8D7D
#define GL_RGBA32I 0x8D82
#define GL_RGB32I 0x8D83
#define GL_RGBA16I 0x8D88
#define GL_RGB16I 0x8D89
#define GL_RGBA8I 0x8D8E
#define GL_RGB8I 0x8D8F
#define GL_RED_INTEGER 0x8D94
#define GL_GREEN_INTEGER 0x8D95
#define GL_BLUE_INTEGER 0x8D96
#define GL_RGB_INTEGER 0x8D98
#define GL_RGBA_INTEGER 0x8D99
#define GL_BGR_INTEGER 0x8D9A
#define GL_BGRA_INTEGER 0x8D9B
#define GL_SAMPLER_1D_ARRAY 0x8DC0
#define GL_SAMPLER_2D_ARRAY 0x8DC1
#define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3
#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
#define GL_SAMPLER_CUBE_SHADOW 0x8DC5
#define GL_UNSIGNED_INT_VEC2 0x8DC6
#define GL_UNSIGNED_INT_VEC3 0x8DC7
#define GL_UNSIGNED_INT_VEC4 0x8DC8
#define GL_INT_SAMPLER_1D 0x8DC9
#define GL_INT_SAMPLER_2D 0x8DCA
#define GL_INT_SAMPLER_3D 0x8DCB
#define GL_INT_SAMPLER_CUBE 0x8DCC
#define GL_INT_SAMPLER_1D_ARRAY 0x8DCE
#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
#define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
#define GL_QUERY_WAIT 0x8E13
#define GL_QUERY_NO_WAIT 0x8E14
#define GL_QUERY_BY_REGION_WAIT 0x8E15
#define GL_QUERY_BY_REGION_NO_WAIT 0x8E16
#define GL_BUFFER_ACCESS_FLAGS 0x911F
#define GL_BUFFER_MAP_LENGTH 0x9120
#define GL_BUFFER_MAP_OFFSET 0x9121
#define GL_DEPTH_COMPONENT32F 0x8CAC
#define GL_DEPTH32F_STENCIL8 0x8CAD
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#define GL_DEPTH_STENCIL 0x84F9
#define GL_UNSIGNED_INT_24_8 0x84FA
#define GL_DEPTH24_STENCIL8 0x88F0
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#define GL_TEXTURE_RED_TYPE 0x8C10
#define GL_TEXTURE_GREEN_TYPE 0x8C11
#define GL_TEXTURE_BLUE_TYPE 0x8C12
#define GL_TEXTURE_ALPHA_TYPE 0x8C13
#define GL_TEXTURE_DEPTH_TYPE 0x8C16
#define GL_UNSIGNED_NORMALIZED 0x8C17
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#define GL_RENDERBUFFER_BINDING 0x8CA7
#define GL_READ_FRAMEBUFFER 0x8CA8
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#define GL_COLOR_ATTACHMENT0 0x8CE0
#define GL_COLOR_ATTACHMENT1 0x8CE1
#define GL_COLOR_ATTACHMENT2 0x8CE2
#define GL_COLOR_ATTACHMENT3 0x8CE3
#define GL_COLOR_ATTACHMENT4 0x8CE4
#define GL_COLOR_ATTACHMENT5 0x8CE5
#define GL_COLOR_ATTACHMENT6 0x8CE6
#define GL_COLOR_ATTACHMENT7 0x8CE7
#define GL_COLOR_ATTACHMENT8 0x8CE8
#define GL_COLOR_ATTACHMENT9 0x8CE9
#define GL_COLOR_ATTACHMENT10 0x8CEA
#define GL_COLOR_ATTACHMENT11 0x8CEB
#define GL_COLOR_ATTACHMENT12 0x8CEC
#define GL_COLOR_ATTACHMENT13 0x8CED
#define GL_COLOR_ATTACHMENT14 0x8CEE
#define GL_COLOR_ATTACHMENT15 0x8CEF
#define GL_COLOR_ATTACHMENT16 0x8CF0
#define GL_COLOR_ATTACHMENT17 0x8CF1
#define GL_COLOR_ATTACHMENT18 0x8CF2
#define GL_COLOR_ATTACHMENT19 0x8CF3
#define GL_COLOR_ATTACHMENT20 0x8CF4
#define GL_COLOR_ATTACHMENT21 0x8CF5
#define GL_COLOR_ATTACHMENT22 0x8CF6
#define GL_COLOR_ATTACHMENT23 0x8CF7
#define GL_COLOR_ATTACHMENT24 0x8CF8
#define GL_COLOR_ATTACHMENT25 0x8CF9
#define GL_COLOR_ATTACHMENT26 0x8CFA
#define GL_COLOR_ATTACHMENT27 0x8CFB
#define GL_COLOR_ATTACHMENT28 0x8CFC
#define GL_COLOR_ATTACHMENT29 0x8CFD
#define GL_COLOR_ATTACHMENT30 0x8CFE
#define GL_COLOR_ATTACHMENT31 0x8CFF
#define GL_DEPTH_ATTACHMENT 0x8D00
#define GL_STENCIL_ATTACHMENT 0x8D20
#define GL_FRAMEBUFFER 0x8D40
#define GL_RENDERBUFFER 0x8D41
#define GL_RENDERBUFFER_WIDTH 0x8D42
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#define GL_STENCIL_INDEX1 0x8D46
#define GL_STENCIL_INDEX4 0x8D47
#define GL_STENCIL_INDEX8 0x8D48
#define GL_STENCIL_INDEX16 0x8D49
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#define GL_MAX_SAMPLES 0x8D57
#define GL_FRAMEBUFFER_SRGB 0x8DB9
#define GL_HALF_FLOAT 0x140B
#define GL_MAP_READ_BIT 0x0001
#define GL_MAP_WRITE_BIT 0x0002
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#define GL_COMPRESSED_RED_RGTC1 0x8DBB
#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
#define GL_COMPRESSED_RG_RGTC2 0x8DBD
#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
#define GL_RG 0x8227
#define GL_RG_INTEGER 0x8228
#define GL_R8 0x8229
#define GL_R16 0x822A
#define GL_RG8 0x822B
#define GL_RG16 0x822C
#define GL_R16F 0x822D
#define GL_R32F 0x822E
#define GL_RG16F 0x822F
#define GL_RG32F 0x8230
#define GL_R8I 0x8231
#define GL_R8UI 0x8232
#define GL_R16I 0x8233
#define GL_R16UI 0x8234
#define GL_R32I 0x8235
#define GL_R32UI 0x8236
#define GL_RG8I 0x8237
#define GL_RG8UI 0x8238
#define GL_RG16I 0x8239
#define GL_RG16UI 0x823A
#define GL_RG32I 0x823B
#define GL_RG32UI 0x823C
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#define GL_SAMPLER_2D_RECT 0x8B63
#define GL_SAMPLER_2D_RECT_SHADOW 0x8B64
#define GL_SAMPLER_BUFFER 0x8DC2
#define GL_INT_SAMPLER_2D_RECT 0x8DCD
#define GL_INT_SAMPLER_BUFFER 0x8DD0
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT 0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_BUFFER 0x8DD8
#define GL_TEXTURE_BUFFER 0x8C2A
#define GL_MAX_TEXTURE_BUFFER_SIZE 0x8C2B
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
#define GL_TEXTURE_RECTANGLE 0x84F5
#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
#define GL_PROXY_TEXTURE_RECTANGLE 0x84F7
#define GL_MAX_RECTANGLE_TEXTURE_SIZE 0x84F8
#define GL_R8_SNORM 0x8F94
#define GL_RG8_SNORM 0x8F95
#define GL_RGB8_SNORM 0x8F96
#define GL_RGBA8_SNORM 0x8F97
#define GL_R16_SNORM 0x8F98
#define GL_RG16_SNORM 0x8F99
#define GL_RGB16_SNORM 0x8F9A
#define GL_RGBA16_SNORM 0x8F9B
#define GL_SIGNED_NORMALIZED 0x8F9C
#define GL_PRIMITIVE_RESTART 0x8F9D
#define GL_PRIMITIVE_RESTART_INDEX 0x8F9E
#define GL_COPY_READ_BUFFER 0x8F36
#define GL_COPY_WRITE_BUFFER 0x8F37
#define GL_UNIFORM_BUFFER 0x8A11
#define GL_UNIFORM_BUFFER_BINDING 0x8A28
#define GL_UNIFORM_BUFFER_START 0x8A29
#define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#define GL_UNIFORM_TYPE 0x8A37
#define GL_UNIFORM_SIZE 0x8A38
#define GL_UNIFORM_NAME_LENGTH 0x8A39
#define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#define GL_UNIFORM_OFFSET 0x8A3B
#define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#define GL_INVALID_INDEX 0xFFFFFFFF
#define GL_CONTEXT_CORE_PROFILE_BIT 0x00000001
#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
#define GL_LINES_ADJACENCY 0x000A
#define GL_LINE_STRIP_ADJACENCY 0x000B
#define GL_TRIANGLES_ADJACENCY 0x000C
#define GL_TRIANGLE_STRIP_ADJACENCY 0x000D
#define GL_PROGRAM_POINT_SIZE 0x8642
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
#define GL_GEOMETRY_SHADER 0x8DD9
#define GL_GEOMETRY_VERTICES_OUT 0x8916
#define GL_GEOMETRY_INPUT_TYPE 0x8917
#define GL_GEOMETRY_OUTPUT_TYPE 0x8918
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0x8DE0
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0x9122
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0x9123
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0x9125
#define GL_CONTEXT_PROFILE_MASK 0x9126
#define GL_DEPTH_CLAMP 0x864F
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
#define GL_FIRST_VERTEX_CONVENTION 0x8E4D
#define GL_LAST_VERTEX_CONVENTION 0x8E4E
#define GL_PROVOKING_VERTEX 0x8E4F
#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
#define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
#define GL_OBJECT_TYPE 0x9112
#define GL_SYNC_CONDITION 0x9113
#define GL_SYNC_STATUS 0x9114
#define GL_SYNC_FLAGS 0x9115
#define GL_SYNC_FENCE 0x9116
#define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
#define GL_UNSIGNALED 0x9118
#define GL_SIGNALED 0x9119
#define GL_ALREADY_SIGNALED 0x911A
#define GL_TIMEOUT_EXPIRED 0x911B
#define GL_CONDITION_SATISFIED 0x911C
#define GL_WAIT_FAILED 0x911D
#define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFF
#define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001
#define GL_SAMPLE_POSITION 0x8E50
#define GL_SAMPLE_MASK 0x8E51
#define GL_SAMPLE_MASK_VALUE 0x8E52
#define GL_MAX_SAMPLE_MASK_WORDS 0x8E59
#define GL_TEXTURE_2D_MULTISAMPLE 0x9100
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0x9101
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#define GL_TEXTURE_SAMPLES 0x9106
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
#define GL_SAMPLER_2D_MULTISAMPLE 0x9108
#define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E
#define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F
#define GL_MAX_INTEGER_SAMPLES 0x9110
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR 0x88FE
#define GL_SRC1_COLOR 0x88F9
#define GL_ONE_MINUS_SRC1_COLOR 0x88FA
#define GL_ONE_MINUS_SRC1_ALPHA 0x88FB
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS 0x88FC
#define GL_ANY_SAMPLES_PASSED 0x8C2F
#define GL_SAMPLER_BINDING 0x8919
#define GL_RGB10_A2UI 0x906F
#define GL_TEXTURE_SWIZZLE_R 0x8E42
#define GL_TEXTURE_SWIZZLE_G 0x8E43
#define GL_TEXTURE_SWIZZLE_B 0x8E44
#define GL_TEXTURE_SWIZZLE_A 0x8E45
#define GL_TEXTURE_SWIZZLE_RGBA 0x8E46
#define GL_TIME_ELAPSED 0x88BF
#define GL_TIMESTAMP 0x8E28
#define GL_INT_2_10_10_10_REV 0x8D9F
#define GL_SAMPLE_SHADING 0x8C36
#define GL_MIN_SAMPLE_SHADING_VALUE 0x8C37
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F
#define GL_TEXTURE_CUBE_MAP_ARRAY 0x9009
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY 0x900B
#define GL_SAMPLER_CUBE_MAP_ARRAY 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW 0x900D
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY 0x900E
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F
#define GL_DRAW_INDIRECT_BUFFER 0x8F3F
#define GL_DRAW_INDIRECT_BUFFER_BINDING 0x8F43
#define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
#define GL_MAX_VERTEX_STREAMS 0x8E71
#define GL_DOUBLE_VEC2 0x8FFC
#define GL_DOUBLE_VEC3 0x8FFD
#define GL_DOUBLE_VEC4 0x8FFE
#define GL_DOUBLE_MAT2 0x8F46
#define GL_DOUBLE_MAT3 0x8F47
#define GL_DOUBLE_MAT4 0x8F48
#define GL_DOUBLE_MAT2x3 0x8F49
#define GL_DOUBLE_MAT2x4 0x8F4A
#define GL_DOUBLE_MAT3x2 0x8F4B
#define GL_DOUBLE_MAT3x4 0x8F4C
#define GL_DOUBLE_MAT4x2 0x8F4D
#define GL_DOUBLE_MAT4x3 0x8F4E
#define GL_ACTIVE_SUBROUTINES 0x8DE5
#define GL_ACTIVE_SUBROUTINE_UNIFORMS 0x8DE6
#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47
#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH 0x8E48
#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49
#define GL_MAX_SUBROUTINES 0x8DE7
#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8
#define GL_NUM_COMPATIBLE_SUBROUTINES 0x8E4A
#define GL_COMPATIBLE_SUBROUTINES 0x8E4B
#define GL_PATCHES 0x000E
#define GL_PATCH_VERTICES 0x8E72
#define GL_PATCH_DEFAULT_INNER_LEVEL 0x8E73
#define GL_PATCH_DEFAULT_OUTER_LEVEL 0x8E74
#define GL_TESS_CONTROL_OUTPUT_VERTICES 0x8E75
#define GL_TESS_GEN_MODE 0x8E76
#define GL_TESS_GEN_SPACING 0x8E77
#define GL_TESS_GEN_VERTEX_ORDER 0x8E78
#define GL_TESS_GEN_POINT_MODE 0x8E79
#define GL_ISOLINES 0x8E7A
#define GL_QUADS 0x0007
#define GL_FRACTIONAL_ODD 0x8E7B
#define GL_FRACTIONAL_EVEN 0x8E7C
#define GL_MAX_PATCH_VERTICES 0x8E7D
#define GL_MAX_TESS_GEN_LEVEL 0x8E7E
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
#define GL_MAX_TESS_PATCH_COMPONENTS 0x8E84
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
#define GL_TESS_EVALUATION_SHADER 0x8E87
#define GL_TESS_CONTROL_SHADER 0x8E88
#define GL_TRANSFORM_FEEDBACK 0x8E22
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_BINDING 0x8E25
#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70
#define GL_FIXED 0x140C
#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
#define GL_LOW_FLOAT 0x8DF0
#define GL_MEDIUM_FLOAT 0x8DF1
#define GL_HIGH_FLOAT 0x8DF2
#define GL_LOW_INT 0x8DF3
#define GL_MEDIUM_INT 0x8DF4
#define GL_HIGH_INT 0x8DF5
#define GL_SHADER_COMPILER 0x8DFA
#define GL_SHADER_BINARY_FORMATS 0x8DF8
#define GL_NUM_SHADER_BINARY_FORMATS 0x8DF9
#define GL_MAX_VERTEX_UNIFORM_VECTORS 0x8DFB
#define GL_MAX_VARYING_VECTORS 0x8DFC
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0x8DFD
#define GL_RGB565 0x8D62
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
#define GL_PROGRAM_BINARY_LENGTH 0x8741
#define GL_NUM_PROGRAM_BINARY_FORMATS 0x87FE
#define GL_PROGRAM_BINARY_FORMATS 0x87FF
#define GL_VERTEX_SHADER_BIT 0x00000001
#define GL_FRAGMENT_SHADER_BIT 0x00000002
#define GL_GEOMETRY_SHADER_BIT 0x00000004
#define GL_TESS_CONTROL_SHADER_BIT 0x00000008
#define GL_TESS_EVALUATION_SHADER_BIT 0x00000010
#define GL_ALL_SHADER_BITS 0xFFFFFFFF
#define GL_PROGRAM_SEPARABLE 0x8258
#define GL_ACTIVE_PROGRAM 0x8259
#define GL_PROGRAM_PIPELINE_BINDING 0x825A
#define GL_MAX_VIEWPORTS 0x825B
#define GL_VIEWPORT_SUBPIXEL_BITS 0x825C
#define GL_VIEWPORT_BOUNDS_RANGE 0x825D
#define GL_LAYER_PROVOKING_VERTEX 0x825E
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0x825F
#define GL_UNDEFINED_VERTEX 0x8260
#define GL_COPY_READ_BUFFER_BINDING 0x8F36
#define GL_COPY_WRITE_BUFFER_BINDING 0x8F37
#define GL_TRANSFORM_FEEDBACK_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_PAUSED 0x8E23
#define GL_UNPACK_COMPRESSED_BLOCK_WIDTH 0x9127
#define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT 0x9128
#define GL_UNPACK_COMPRESSED_BLOCK_DEPTH 0x9129
#define GL_UNPACK_COMPRESSED_BLOCK_SIZE 0x912A
#define GL_PACK_COMPRESSED_BLOCK_WIDTH 0x912B
#define GL_PACK_COMPRESSED_BLOCK_HEIGHT 0x912C
#define GL_PACK_COMPRESSED_BLOCK_DEPTH 0x912D
#define GL_PACK_COMPRESSED_BLOCK_SIZE 0x912E
#define GL_NUM_SAMPLE_COUNTS 0x9380
#define GL_MIN_MAP_BUFFER_ALIGNMENT 0x90BC
#define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#define GL_UNIFORM_BARRIER_BIT 0x00000004
#define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#define GL_COMMAND_BARRIER_BIT 0x00000040
#define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#define GL_MAX_IMAGE_UNITS 0x8F38
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#define GL_IMAGE_BINDING_NAME 0x8F3A
#define GL_IMAGE_BINDING_LEVEL 0x8F3B
#define GL_IMAGE_BINDING_LAYERED 0x8F3C
#define GL_IMAGE_BINDING_LAYER 0x8F3D
#define GL_IMAGE_BINDING_ACCESS 0x8F3E
#define GL_IMAGE_1D 0x904C
#define GL_IMAGE_2D 0x904D
#define GL_IMAGE_3D 0x904E
#define GL_IMAGE_2D_RECT 0x904F
#define GL_IMAGE_CUBE 0x9050
#define GL_IMAGE_BUFFER 0x9051
#define GL_IMAGE_1D_ARRAY 0x9052
#define GL_IMAGE_2D_ARRAY 0x9053
#define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#define GL_IMAGE_2D_MULTISAMPLE 0x9055
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#define GL_INT_IMAGE_1D 0x9057
#define GL_INT_IMAGE_2D 0x9058
#define GL_INT_IMAGE_3D 0x9059
#define GL_INT_IMAGE_2D_RECT 0x905A
#define GL_INT_IMAGE_CUBE 0x905B
#define GL_INT_IMAGE_BUFFER 0x905C
#define GL_INT_IMAGE_1D_ARRAY 0x905D
#define GL_INT_IMAGE_2D_ARRAY 0x905E
#define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#define GL_MAX_IMAGE_SAMPLES 0x906D
#define GL_IMAGE_BINDING_FORMAT 0x906E
#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#define GL_COMPRESSED_RGBA_BPTC_UNORM 0x8E8C
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM 0x8E8D
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT 0x8E8E
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT 0x8E8F
#define GL_TEXTURE_IMMUTABLE_FORMAT 0x912F
#define GL_NUM_SHADING_LANGUAGE_VERSIONS 0x82E9
#define GL_VERTEX_ATTRIB_ARRAY_LONG 0x874E
#define GL_COMPRESSED_RGB8_ETC2 0x9274
#define GL_COMPRESSED_SRGB8_ETC2 0x9275
#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9276
#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9277
#define GL_COMPRESSED_RGBA8_ETC2_EAC 0x9278
#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC 0x9279
#define GL_COMPRESSED_R11_EAC 0x9270
#define GL_COMPRESSED_SIGNED_R11_EAC 0x9271
#define GL_COMPRESSED_RG11_EAC 0x9272
#define GL_COMPRESSED_SIGNED_RG11_EAC 0x9273
#define GL_PRIMITIVE_RESTART_FIXED_INDEX 0x8D69
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE 0x8D6A
#define GL_MAX_ELEMENT_INDEX 0x8D6B
#define GL_COMPUTE_SHADER 0x91B9
#define GL_MAX_COMPUTE_UNIFORM_BLOCKS 0x91BB
#define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS 0x91BC
#define GL_MAX_COMPUTE_IMAGE_UNIFORMS 0x91BD
#define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE 0x8262
#define GL_MAX_COMPUTE_UNIFORM_COMPONENTS 0x8263
#define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS 0x8264
#define GL_MAX_COMPUTE_ATOMIC_COUNTERS 0x8265
#define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS 0x8266
#define GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS 0x90EB
#define GL_MAX_COMPUTE_WORK_GROUP_COUNT 0x91BE
#define GL_MAX_COMPUTE_WORK_GROUP_SIZE 0x91BF
#define GL_COMPUTE_WORK_GROUP_SIZE 0x8267
#define GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER 0x90EC
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER 0x90ED
#define GL_DISPATCH_INDIRECT_BUFFER 0x90EE
#define GL_DISPATCH_INDIRECT_BUFFER_BINDING 0x90EF
#define GL_COMPUTE_SHADER_BIT 0x00000020
#define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#define GL_DEBUG_SOURCE_API 0x8246
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#define GL_DEBUG_SOURCE_APPLICATION 0x824A
#define GL_DEBUG_SOURCE_OTHER 0x824B
#define GL_DEBUG_TYPE_ERROR 0x824C
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#define GL_DEBUG_TYPE_PORTABILITY 0x824F
#define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#define GL_DEBUG_TYPE_OTHER 0x8251
#define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#define GL_DEBUG_LOGGED_MESSAGES 0x9145
#define GL_DEBUG_SEVERITY_HIGH 0x9146
#define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#define GL_DEBUG_SEVERITY_LOW 0x9148
#define GL_DEBUG_TYPE_MARKER 0x8268
#define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#define GL_DEBUG_TYPE_POP_GROUP 0x826A
#define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#define GL_BUFFER 0x82E0
#define GL_SHADER 0x82E1
#define GL_PROGRAM 0x82E2
#define GL_VERTEX_ARRAY 0x8074
#define GL_QUERY 0x82E3
#define GL_PROGRAM_PIPELINE 0x82E4
#define GL_SAMPLER 0x82E6
#define GL_MAX_LABEL_LENGTH 0x82E8
#define GL_DEBUG_OUTPUT 0x92E0
#define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#define GL_MAX_UNIFORM_LOCATIONS 0x826E
#define GL_FRAMEBUFFER_DEFAULT_WIDTH 0x9310
#define GL_FRAMEBUFFER_DEFAULT_HEIGHT 0x9311
#define GL_FRAMEBUFFER_DEFAULT_LAYERS 0x9312
#define GL_FRAMEBUFFER_DEFAULT_SAMPLES 0x9313
#define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS 0x9314
#define GL_MAX_FRAMEBUFFER_WIDTH 0x9315
#define GL_MAX_FRAMEBUFFER_HEIGHT 0x9316
#define GL_MAX_FRAMEBUFFER_LAYERS 0x9317
#define GL_MAX_FRAMEBUFFER_SAMPLES 0x9318
#define GL_INTERNALFORMAT_SUPPORTED 0x826F
#define GL_INTERNALFORMAT_PREFERRED 0x8270
#define GL_INTERNALFORMAT_RED_SIZE 0x8271
#define GL_INTERNALFORMAT_GREEN_SIZE 0x8272
#define GL_INTERNALFORMAT_BLUE_SIZE 0x8273
#define GL_INTERNALFORMAT_ALPHA_SIZE 0x8274
#define GL_INTERNALFORMAT_DEPTH_SIZE 0x8275
#define GL_INTERNALFORMAT_STENCIL_SIZE 0x8276
#define GL_INTERNALFORMAT_SHARED_SIZE 0x8277
#define GL_INTERNALFORMAT_RED_TYPE 0x8278
#define GL_INTERNALFORMAT_GREEN_TYPE 0x8279
#define GL_INTERNALFORMAT_BLUE_TYPE 0x827A
#define GL_INTERNALFORMAT_ALPHA_TYPE 0x827B
#define GL_INTERNALFORMAT_DEPTH_TYPE 0x827C
#define GL_INTERNALFORMAT_STENCIL_TYPE 0x827D
#define GL_MAX_WIDTH 0x827E
#define GL_MAX_HEIGHT 0x827F
#define GL_MAX_DEPTH 0x8280
#define GL_MAX_LAYERS 0x8281
#define GL_MAX_COMBINED_DIMENSIONS 0x8282
#define GL_COLOR_COMPONENTS 0x8283
#define GL_DEPTH_COMPONENTS 0x8284
#define GL_STENCIL_COMPONENTS 0x8285
#define GL_COLOR_RENDERABLE 0x8286
#define GL_DEPTH_RENDERABLE 0x8287
#define GL_STENCIL_RENDERABLE 0x8288
#define GL_FRAMEBUFFER_RENDERABLE 0x8289
#define GL_FRAMEBUFFER_RENDERABLE_LAYERED 0x828A
#define GL_FRAMEBUFFER_BLEND 0x828B
#define GL_READ_PIXELS 0x828C
#define GL_READ_PIXELS_FORMAT 0x828D
#define GL_READ_PIXELS_TYPE 0x828E
#define GL_TEXTURE_IMAGE_FORMAT 0x828F
#define GL_TEXTURE_IMAGE_TYPE 0x8290
#define GL_GET_TEXTURE_IMAGE_FORMAT 0x8291
#define GL_GET_TEXTURE_IMAGE_TYPE 0x8292
#define GL_MIPMAP 0x8293
#define GL_MANUAL_GENERATE_MIPMAP 0x8294
#define GL_AUTO_GENERATE_MIPMAP 0x8295
#define GL_COLOR_ENCODING 0x8296
#define GL_SRGB_READ 0x8297
#define GL_SRGB_WRITE 0x8298
#define GL_FILTER 0x829A
#define GL_VERTEX_TEXTURE 0x829B
#define GL_TESS_CONTROL_TEXTURE 0x829C
#define GL_TESS_EVALUATION_TEXTURE 0x829D
#define GL_GEOMETRY_TEXTURE 0x829E
#define GL_FRAGMENT_TEXTURE 0x829F
#define GL_COMPUTE_TEXTURE 0x82A0
#define GL_TEXTURE_SHADOW 0x82A1
#define GL_TEXTURE_GATHER 0x82A2
#define GL_TEXTURE_GATHER_SHADOW 0x82A3
#define GL_SHADER_IMAGE_LOAD 0x82A4
#define GL_SHADER_IMAGE_STORE 0x82A5
#define GL_SHADER_IMAGE_ATOMIC 0x82A6
#define GL_IMAGE_TEXEL_SIZE 0x82A7
#define GL_IMAGE_COMPATIBILITY_CLASS 0x82A8
#define GL_IMAGE_PIXEL_FORMAT 0x82A9
#define GL_IMAGE_PIXEL_TYPE 0x82AA
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST 0x82AC
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST 0x82AD
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE 0x82AE
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE 0x82AF
#define GL_TEXTURE_COMPRESSED_BLOCK_WIDTH 0x82B1
#define GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT 0x82B2
#define GL_TEXTURE_COMPRESSED_BLOCK_SIZE 0x82B3
#define GL_CLEAR_BUFFER 0x82B4
#define GL_TEXTURE_VIEW 0x82B5
#define GL_VIEW_COMPATIBILITY_CLASS 0x82B6
#define GL_FULL_SUPPORT 0x82B7
#define GL_CAVEAT_SUPPORT 0x82B8
#define GL_IMAGE_CLASS_4_X_32 0x82B9
#define GL_IMAGE_CLASS_2_X_32 0x82BA
#define GL_IMAGE_CLASS_1_X_32 0x82BB
#define GL_IMAGE_CLASS_4_X_16 0x82BC
#define GL_IMAGE_CLASS_2_X_16 0x82BD
#define GL_IMAGE_CLASS_1_X_16 0x82BE
#define GL_IMAGE_CLASS_4_X_8 0x82BF
#define GL_IMAGE_CLASS_2_X_8 0x82C0
#define GL_IMAGE_CLASS_1_X_8 0x82C1
#define GL_IMAGE_CLASS_11_11_10 0x82C2
#define GL_IMAGE_CLASS_10_10_10_2 0x82C3
#define GL_VIEW_CLASS_128_BITS 0x82C4
#define GL_VIEW_CLASS_96_BITS 0x82C5
#define GL_VIEW_CLASS_64_BITS 0x82C6
#define GL_VIEW_CLASS_48_BITS 0x82C7
#define GL_VIEW_CLASS_32_BITS 0x82C8
#define GL_VIEW_CLASS_24_BITS 0x82C9
#define GL_VIEW_CLASS_16_BITS 0x82CA
#define GL_VIEW_CLASS_8_BITS 0x82CB
#define GL_VIEW_CLASS_S3TC_DXT1_RGB 0x82CC
#define GL_VIEW_CLASS_S3TC_DXT1_RGBA 0x82CD
#define GL_VIEW_CLASS_S3TC_DXT3_RGBA 0x82CE
#define GL_VIEW_CLASS_S3TC_DXT5_RGBA 0x82CF
#define GL_VIEW_CLASS_RGTC1_RED 0x82D0
#define GL_VIEW_CLASS_RGTC2_RG 0x82D1
#define GL_VIEW_CLASS_BPTC_UNORM 0x82D2
#define GL_VIEW_CLASS_BPTC_FLOAT 0x82D3
#define GL_UNIFORM 0x92E1
#define GL_UNIFORM_BLOCK 0x92E2
#define GL_PROGRAM_INPUT 0x92E3
#define GL_PROGRAM_OUTPUT 0x92E4
#define GL_BUFFER_VARIABLE 0x92E5
#define GL_SHADER_STORAGE_BLOCK 0x92E6
#define GL_VERTEX_SUBROUTINE 0x92E8
#define GL_TESS_CONTROL_SUBROUTINE 0x92E9
#define GL_TESS_EVALUATION_SUBROUTINE 0x92EA
#define GL_GEOMETRY_SUBROUTINE 0x92EB
#define GL_FRAGMENT_SUBROUTINE 0x92EC
#define GL_COMPUTE_SUBROUTINE 0x92ED
#define GL_VERTEX_SUBROUTINE_UNIFORM 0x92EE
#define GL_TESS_CONTROL_SUBROUTINE_UNIFORM 0x92EF
#define GL_TESS_EVALUATION_SUBROUTINE_UNIFORM 0x92F0
#define GL_GEOMETRY_SUBROUTINE_UNIFORM 0x92F1
#define GL_FRAGMENT_SUBROUTINE_UNIFORM 0x92F2
#define GL_COMPUTE_SUBROUTINE_UNIFORM 0x92F3
#define GL_TRANSFORM_FEEDBACK_VARYING 0x92F4
#define GL_ACTIVE_RESOURCES 0x92F5
#define GL_MAX_NAME_LENGTH 0x92F6
#define GL_MAX_NUM_ACTIVE_VARIABLES 0x92F7
#define GL_MAX_NUM_COMPATIBLE_SUBROUTINES 0x92F8
#define GL_NAME_LENGTH 0x92F9
#define GL_TYPE 0x92FA
#define GL_ARRAY_SIZE 0x92FB
#define GL_OFFSET 0x92FC
#define GL_BLOCK_INDEX 0x92FD
#define GL_ARRAY_STRIDE 0x92FE
#define GL_MATRIX_STRIDE 0x92FF
#define GL_IS_ROW_MAJOR 0x9300
#define GL_ATOMIC_COUNTER_BUFFER_INDEX 0x9301
#define GL_BUFFER_BINDING 0x9302
#define GL_BUFFER_DATA_SIZE 0x9303
#define GL_NUM_ACTIVE_VARIABLES 0x9304
#define GL_ACTIVE_VARIABLES 0x9305
#define GL_REFERENCED_BY_VERTEX_SHADER 0x9306
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER 0x9307
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER 0x9308
#define GL_REFERENCED_BY_GEOMETRY_SHADER 0x9309
#define GL_REFERENCED_BY_FRAGMENT_SHADER 0x930A
#define GL_REFERENCED_BY_COMPUTE_SHADER 0x930B
#define GL_TOP_LEVEL_ARRAY_SIZE 0x930C
#define GL_TOP_LEVEL_ARRAY_STRIDE 0x930D
#define GL_LOCATION 0x930E
#define GL_LOCATION_INDEX 0x930F
#define GL_IS_PER_PATCH 0x92E7
#define GL_SHADER_STORAGE_BUFFER 0x90D2
#define GL_SHADER_STORAGE_BUFFER_BINDING 0x90D3
#define GL_SHADER_STORAGE_BUFFER_START 0x90D4
#define GL_SHADER_STORAGE_BUFFER_SIZE 0x90D5
#define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS 0x90D6
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS 0x90D7
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS 0x90D8
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS 0x90D9
#define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS 0x90DA
#define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS 0x90DB
#define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS 0x90DC
#define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS 0x90DD
#define GL_MAX_SHADER_STORAGE_BLOCK_SIZE 0x90DE
#define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF
#define GL_SHADER_STORAGE_BARRIER_BIT 0x00002000
#define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0x8F39
#define GL_DEPTH_STENCIL_TEXTURE_MODE 0x90EA
#define GL_TEXTURE_BUFFER_OFFSET 0x919D
#define GL_TEXTURE_BUFFER_SIZE 0x919E
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT 0x919F
#define GL_TEXTURE_VIEW_MIN_LEVEL 0x82DB
#define GL_TEXTURE_VIEW_NUM_LEVELS 0x82DC
#define GL_TEXTURE_VIEW_MIN_LAYER 0x82DD
#define GL_TEXTURE_VIEW_NUM_LAYERS 0x82DE
#define GL_TEXTURE_IMMUTABLE_LEVELS 0x82DF
#define GL_VERTEX_ATTRIB_BINDING 0x82D4
#define GL_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D5
#define GL_VERTEX_BINDING_DIVISOR 0x82D6
#define GL_VERTEX_BINDING_OFFSET 0x82D7
#define GL_VERTEX_BINDING_STRIDE 0x82D8
#define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D9
#define GL_MAX_VERTEX_ATTRIB_BINDINGS 0x82DA
#define GL_VERTEX_BINDING_BUFFER 0x8F4F
#define GL_DISPLAY_LIST 0x82E7
#define GL_STACK_UNDERFLOW 0x0504
#define GL_STACK_OVERFLOW 0x0503

#define GL_VERSION_1_0 1
extern BizOGL::GLFunctor<void (GLenum mode)> biz_glCullFace;
#define glCullFace biz_glCullFace
extern BizOGL::GLFunctor<void (GLenum mode)> biz_glFrontFace;
#define glFrontFace biz_glFrontFace
extern BizOGL::GLFunctor<void (GLenum target, GLenum mode)> biz_glHint;
#define glHint biz_glHint
extern BizOGL::GLFunctor<void (GLfloat width)> biz_glLineWidth;
#define glLineWidth biz_glLineWidth
extern BizOGL::GLFunctor<void (GLfloat size)> biz_glPointSize;
#define glPointSize biz_glPointSize
extern BizOGL::GLFunctor<void (GLenum face, GLenum mode)> biz_glPolygonMode;
#define glPolygonMode biz_glPolygonMode
extern BizOGL::GLFunctor<void (GLint x, GLint y, GLsizei width, GLsizei height)> biz_glScissor;
#define glScissor biz_glScissor
extern BizOGL::GLFunctor<void (GLenum target, GLenum pname, GLfloat param)> biz_glTexParameterf;
#define glTexParameterf biz_glTexParameterf
extern BizOGL::GLFunctor<void (GLenum target, GLenum pname, const GLfloat *params)> biz_glTexParameterfv;
#define glTexParameterfv biz_glTexParameterfv
extern BizOGL::GLFunctor<void (GLenum target, GLenum pname, GLint param)> biz_glTexParameteri;
#define glTexParameteri biz_glTexParameteri
extern BizOGL::GLFunctor<void (GLenum target, GLenum pname, const GLint *params)> biz_glTexParameteriv;
#define glTexParameteriv biz_glTexParameteriv
extern BizOGL::GLFunctor<void (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels)> biz_glTexImage1D;
#define glTexImage1D biz_glTexImage1D
extern BizOGL::GLFunctor<void (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels)> biz_glTexImage2D;
#define glTexImage2D biz_glTexImage2D
extern BizOGL::GLFunctor<void (GLenum buf)> biz_glDrawBuffer;
#define glDrawBuffer biz_glDrawBuffer
extern BizOGL::GLFunctor<void (GLbitfield mask)> biz_glClear;
#define glClear biz_glClear
extern BizOGL::GLFunctor<void (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)> biz_glClearColor;
#define glClearColor biz_glClearColor
extern BizOGL::GLFunctor<void (GLint s)> biz_glClearStencil;
#define glClearStencil biz_glClearStencil
extern BizOGL::GLFunctor<void (GLdouble depth)> biz_glClearDepth;
#define glClearDepth biz_glClearDepth
extern BizOGL::GLFunctor<void (GLuint mask)> biz_glStencilMask;
#define glStencilMask biz_glStencilMask
extern BizOGL::GLFunctor<void (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)> biz_glColorMask;
#define glColorMask biz_glColorMask
extern BizOGL::GLFunctor<void (GLboolean flag)> biz_glDepthMask;
#define glDepthMask biz_glDepthMask
extern BizOGL::GLFunctor<void (GLenum cap)> biz_glDisable;
#define glDisable biz_glDisable
extern BizOGL::GLFunctor<void (GLenum cap)> biz_glEnable;
#define glEnable biz_glEnable
extern BizOGL::GLFunctor<void (void)> biz_glFinish;
#define glFinish biz_glFinish
extern BizOGL::GLFunctor<void (void)> biz_glFlush;
#define glFlush biz_glFlush
extern BizOGL::GLFunctor<void (GLenum sfactor, GLenum dfactor)> biz_glBlendFunc;
#define glBlendFunc biz_glBlendFunc
extern BizOGL::GLFunctor<void (GLenum opcode)> biz_glLogicOp;
#define glLogicOp biz_glLogicOp
extern BizOGL::GLFunctor<void (GLenum func, GLint ref, GLuint mask)> biz_glStencilFunc;
#define glStencilFunc biz_glStencilFunc
extern BizOGL::GLFunctor<void (GLenum fail, GLenum zfail, GLenum zpass)> biz_glStencilOp;
#define glStencilOp biz_glStencilOp
extern BizOGL::GLFunctor<void (GLenum func)> biz_glDepthFunc;
#define glDepthFunc biz_glDepthFunc
extern BizOGL::GLFunctor<void (GLenum pname, GLfloat param)> biz_glPixelStoref;
#define glPixelStoref biz_glPixelStoref
extern BizOGL::GLFunctor<void (GLenum pname, GLint param)> biz_glPixelStorei;
#define glPixelStorei biz_glPixelStorei
extern BizOGL::GLFunctor<void (GLenum src)> biz_glReadBuffer;
#define glReadBuffer biz_glReadBuffer
extern BizOGL::GLFunctor<void (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels)> biz_glReadPixels;
#define glReadPixels biz_glReadPixels
extern BizOGL::GLFunctor<void (GLenum pname, GLboolean *data)> biz_glGetBooleanv;
#define glGetBooleanv biz_glGetBooleanv
extern BizOGL::GLFunctor<void (GLenum pname, GLdouble *data)> biz_glGetDoublev;
#define glGetDoublev biz_glGetDoublev
extern BizOGL::GLFunctor<GLenum (void)> biz_glGetError;
#define glGetError biz_glGetError
extern BizOGL::GLFunctor<void (GLenum pname, GLfloat *data)> biz_glGetFloatv;
#define glGetFloatv biz_glGetFloatv
extern BizOGL::GLFunctor<void (GLenum pname, GLint *data)> biz_glGetIntegerv;
#define glGetIntegerv biz_glGetIntegerv
extern BizOGL::GLFunctor<const GLubyte * (GLenum name)> biz_glGetString;
#define glGetString biz_glGetString
extern BizOGL::GLFunctor<void (GLenum target, GLint level, GLenum format, GLenum type, void *pixels)> biz_glGetTexImage;
#define glGetTexImage biz_glGetTexImage
extern BizOGL::GLFunctor<void (GLenum target, GLenum pname, GLfloat *params)> biz_glGetTexParameterfv;
#define glGetTexParameterfv biz_glGetTexParameterfv
extern BizOGL::GLFunctor<void (GLenum target, GLenum pname, GLint *params)> biz_glGetTexParameteriv;
#define glGetTexParameteriv biz_glGetTexParameteriv
extern BizOGL::GLFunctor<void (GLenum target, GLint level, GLenum pname, GLfloat *params)> biz_glGetTexLevelParameterfv;
#define glGetTexLevelParameterfv biz_glGetTexLevelParameterfv
extern BizOGL::GLFunctor<void (GLenum target, GLint level, GLenum pname, GLint *params)> biz_glGetTexLevelParameteriv;
#define glGetTexLevelParameteriv biz_glGetTexLevelParameteriv
extern BizOGL::GLFunctor<GLboolean (GLenum cap)> biz_glIsEnabled;
#define glIsEnabled biz_glIsEnabled
extern BizOGL::GLFunctor<void (GLdouble n, GLdouble f)> biz_glDepthRange;
#define glDepthRange biz_glDepthRange
extern BizOGL::GLFunctor<void (GLint x, GLint y, GLsizei width, GLsizei height)> biz_glViewport;
#define glViewport biz_glViewport

#define GL_VERSION_1_1 1
extern BizOGL::GLFunctor<void (GLenum mode, GLint first, GLsizei count)> biz_glDrawArrays;
#define glDrawArrays biz_glDrawArrays
extern BizOGL::GLFunctor<void (GLenum mode, GLsizei count, GLenum type, const void *indices)> biz_glDrawElements;
#define glDrawElements biz_glDrawElements
extern BizOGL::GLFunctor<void (GLfloat factor, GLfloat units)> biz_glPolygonOffset;
#define glPolygonOffset biz_glPolygonOffset
extern BizOGL::GLFunctor<void (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)> biz_glCopyTexImage1D;
#define glCopyTexImage1D biz_glCopyTexImage1D
extern BizOGL::GLFunctor<void (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)> biz_glCopyTexImage2D;
#define glCopyTexImage2D biz_glCopyTexImage2D
extern BizOGL::GLFunctor<void (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)> biz_glCopyTexSubImage1D;
#define glCopyTexSubImage1D biz_glCopyTexSubImage1D
extern BizOGL::GLFunctor<void (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)> biz_glCopyTexSubImage2D;
#define glCopyTexSubImage2D biz_glCopyTexSubImage2D
extern BizOGL::GLFunctor<void (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)> biz_glTexSubImage1D;
#define glTexSubImage1D biz_glTexSubImage1D
extern BizOGL::GLFunctor<void (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)> biz_glTexSubImage2D;
#define glTexSubImage2D biz_glTexSubImage2D
extern BizOGL::GLFunctor<void (GLenum target, GLuint texture)> biz_glBindTexture;
#define glBindTexture biz_glBindTexture
extern BizOGL::GLFunctor<void (GLsizei n, const GLuint *textures)> biz_glDeleteTextures;
#define glDeleteTextures biz_glDeleteTextures
extern BizOGL::GLFunctor<void (GLsizei n, GLuint *textures)> biz_glGenTextures;
#define glGenTextures biz_glGenTextures
extern BizOGL::GLFunctor<GLboolean (GLuint texture)> biz_glIsTexture;
#define glIsTexture biz_glIsTexture

#define GL_VERSION_1_2 1
extern BizOGL::GLFunctor<void (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices)> biz_glDrawRangeElements;
#define glDrawRangeElements biz_glDrawRangeElements
extern BizOGL::GLFunctor<void (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)> biz_glTexImage3D;
#define glTexImage3D biz_glTexImage3D
extern BizOGL::GLFunctor<void (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)> biz_glTexSubImage3D;
#define glTexSubImage3D biz_glTexSubImage3D
extern BizOGL::GLFunctor<void (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)> biz_glCopyTexSubImage3D;
#define glCopyTexSubImage3D biz_glCopyTexSubImage3D

#define GL_VERSION_1_3 1
extern BizOGL::GLFunctor<void (GLenum texture)> biz_glActiveTexture;
#define glActiveTexture biz_glActiveTexture
extern BizOGL::GLFunctor<void (GLfloat value, GLboolean invert)> biz_glSampleCoverage;
#define glSampleCoverage biz_glSampleCoverage
extern BizOGL::GLFunctor<void (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data)> biz_glCompressedTexImage3D;
#define glCompressedTexImage3D biz_glCompressedTexImage3D
extern BizOGL::GLFunctor<void (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data)> biz_glCompressedTexImage2D;
#define glCompressedTexImage2D biz_glCompressedTexImage2D
extern BizOGL::GLFunctor<void (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data)> biz_glCompressedTexImage1D;
#define glCompressedTexImage1D biz_glCompressedTexImage1D
extern BizOGL::GLFunctor<void (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)> biz_glCompressedTexSubImage3D;
#define glCompressedTexSubImage3D biz_glCompressedTexSubImage3D
extern BizOGL::GLFunctor<void (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)> biz_glCompressedTexSubImage2D;
#define glCompressedTexSubImage2D biz_glCompressedTexSubImage2D
extern BizOGL::GLFunctor<void (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data)> biz_glCompressedTexSubImage1D;
#define glCompressedTexSubImage1D biz_glCompressedTexSubImage1D
extern BizOGL::GLFunctor<void (GLenum target, GLint level, void *img)> biz_glGetCompressedTexImage;
#define glGetCompressedTexImage biz_glGetCompressedTexImage

#define GL_VERSION_1_4 1
extern BizOGL::GLFunctor<void (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)> biz_glBlendFuncSeparate;
#define glBlendFuncSeparate biz_glBlendFuncSeparate
extern BizOGL::GLFunctor<void (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount)> biz_glMultiDrawArrays;
#define glMultiDrawArrays biz_glMultiDrawArrays
extern BizOGL::GLFunctor<void (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount)> biz_glMultiDrawElements;
#define glMultiDrawElements biz_glMultiDrawElements
extern BizOGL::GLFunctor<void (GLenum pname, GLfloat param)> biz_glPointParameterf;
#define glPointParameterf biz_glPointParameterf
extern BizOGL::GLFunctor<void (GLenum pname, const GLfloat *params)> biz_glPointParameterfv;
#define glPointParameterfv biz_glPointParameterfv
extern BizOGL::GLFunctor<void (GLenum pname, GLint param)> biz_glPointParameteri;
#define glPointParameteri biz_glPointParameteri
extern BizOGL::GLFunctor<void (GLenum pname, const GLint *params)> biz_glPointParameteriv;
#define glPointParameteriv biz_glPointParameteriv
extern BizOGL::GLFunctor<void (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)> biz_glBlendColor;
#define glBlendColor biz_glBlendColor
extern BizOGL::GLFunctor<void (GLenum mode)> biz_glBlendEquation;
#define glBlendEquation biz_glBlendEquation

#define GL_VERSION_1_5 1
extern BizOGL::GLFunctor<void (GLsizei n, GLuint *ids)> biz_glGenQueries;
#define glGenQueries biz_glGenQueries
extern BizOGL::GLFunctor<void (GLsizei n, const GLuint *ids)> biz_glDeleteQueries;
#define glDeleteQueries biz_glDeleteQueries
extern BizOGL::GLFunctor<GLboolean (GLuint id)> biz_glIsQuery;
#define glIsQuery biz_glIsQuery
extern BizOGL::GLFunctor<void (GLenum target, GLuint id)> biz_glBeginQuery;
#define glBeginQuery biz_glBeginQuery
extern BizOGL::GLFunctor<void (GLenum target)> biz_glEndQuery;
#define glEndQuery biz_glEndQuery
extern BizOGL::GLFunctor<void (GLenum target, GLenum pname, GLint *params)> biz_glGetQueryiv;
#define glGetQueryiv biz_glGetQueryiv
extern BizOGL::GLFunctor<void (GLuint id, GLenum pname, GLint *params)> biz_glGetQueryObjectiv;
#define glGetQueryObjectiv biz_glGetQueryObjectiv
extern BizOGL::GLFunctor<void (GLuint id, GLenum pname, GLuint *params)> biz_glGetQueryObjectuiv;
#define glGetQueryObjectuiv biz_glGetQueryObjectuiv
extern BizOGL::GLFunctor<void (GLenum target, GLuint buffer)> biz_glBindBuffer;
#define glBindBuffer biz_glBindBuffer
extern BizOGL::GLFunctor<void (GLsizei n, const GLuint *buffers)> biz_glDeleteBuffers;
#define glDeleteBuffers biz_glDeleteBuffers
extern BizOGL::GLFunctor<void (GLsizei n, GLuint *buffers)> biz_glGenBuffers;
#define glGenBuffers biz_glGenBuffers
extern BizOGL::GLFunctor<GLboolean (GLuint buffer)> biz_glIsBuffer;
#define glIsBuffer biz_glIsBuffer
extern BizOGL::GLFunctor<void (GLenum target, GLsizeiptr size, const void *data, GLenum usage)> biz_glBufferData;
#define glBufferData biz_glBufferData
extern BizOGL::GLFunctor<void (GLenum target, GLintptr offset, GLsizeiptr size, const void *data)> biz_glBufferSubData;
#define glBufferSubData biz_glBufferSubData
extern BizOGL::GLFunctor<void (GLenum target, GLintptr offset, GLsizeiptr size, void *data)> biz_glGetBufferSubData;
#define glGetBufferSubData biz_glGetBufferSubData
extern BizOGL::GLFunctor<void * (GLenum target, GLenum access)> biz_glMapBuffer;
#define glMapBuffer biz_glMapBuffer
extern BizOGL::GLFunctor<GLboolean (GLenum target)> biz_glUnmapBuffer;
#define glUnmapBuffer biz_glUnmapBuffer
extern BizOGL::GLFunctor<void (GLenum target, GLenum pname, GLint *params)> biz_glGetBufferParameteriv;
#define glGetBufferParameteriv biz_glGetBufferParameteriv
extern BizOGL::GLFunctor<void (GLenum target, GLenum pname, void **params)> biz_glGetBufferPointerv;
#define glGetBufferPointerv biz_glGetBufferPointerv

#define GL_VERSION_2_0 1
extern BizOGL::GLFunctor<void (GLenum modeRGB, GLenum modeAlpha)> biz_glBlendEquationSeparate;
#define glBlendEquationSeparate biz_glBlendEquationSeparate
extern BizOGL::GLFunctor<void (GLsizei n, const GLenum *bufs)> biz_glDrawBuffers;
#define glDrawBuffers biz_glDrawBuffers
extern BizOGL::GLFunctor<void (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)> biz_glStencilOpSeparate;
#define glStencilOpSeparate biz_glStencilOpSeparate
extern BizOGL::GLFunctor<void (GLenum face, GLenum func, GLint ref, GLuint mask)> biz_glStencilFuncSeparate;
#define glStencilFuncSeparate biz_glStencilFuncSeparate
extern BizOGL::GLFunctor<void (GLenum face, GLuint mask)> biz_glStencilMaskSeparate;
#define glStencilMaskSeparate biz_glStencilMaskSeparate
extern BizOGL::GLFunctor<void (GLuint program, GLuint shader)> biz_glAttachShader;
#define glAttachShader biz_glAttachShader
extern BizOGL::GLFunctor<void (GLuint program, GLuint index, const GLchar *name)> biz_glBindAttribLocation;
#define glBindAttribLocation biz_glBindAttribLocation
extern BizOGL::GLFunctor<void (GLuint shader)> biz_glCompileShader;
#define glCompileShader biz_glCompileShader
extern BizOGL::GLFunctor<GLuint (void)> biz_glCreateProgram;
#define glCreateProgram biz_glCreateProgram
extern BizOGL::GLFunctor<GLuint (GLenum type)> biz_glCreateShader;
#define glCreateShader biz_glCreateShader
extern BizOGL::GLFunctor<void (GLuint program)> biz_glDeleteProgram;
#define glDeleteProgram biz_glDeleteProgram
extern BizOGL::GLFunctor<void (GLuint shader)> biz_glDeleteShader;
#define glDeleteShader biz_glDeleteShader
extern BizOGL::GLFunctor<void (GLuint program, GLuint shader)> biz_glDetachShader;
#define glDetachShader biz_glDetachShader
extern BizOGL::GLFunctor<void (GLuint index)> biz_glDisableVertexAttribArray;
#define glDisableVertexAttribArray biz_glDisableVertexAttribArray
extern BizOGL::GLFunctor<void (GLuint index)> biz_glEnableVertexAttribArray;
#define glEnableVertexAttribArray biz_glEnableVertexAttribArray
extern BizOGL::GLFunctor<void (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)> biz_glGetActiveAttrib;
#define glGetActiveAttrib biz_glGetActiveAttrib
extern BizOGL::GLFunctor<void (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)> biz_glGetActiveUniform;
#define glGetActiveUniform biz_glGetActiveUniform
extern BizOGL::GLFunctor<void (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)> biz_glGetAttachedShaders;
#define glGetAttachedShaders biz_glGetAttachedShaders
extern BizOGL::GLFunctor<GLint (GLuint program, const GLchar *name)> biz_glGetAttribLocation;
#define glGetAttribLocation biz_glGetAttribLocation
extern BizOGL::GLFunctor<void (GLuint program, GLenum pname, GLint *params)> biz_glGetProgramiv;
#define glGetProgramiv biz_glGetProgramiv
extern BizOGL::GLFunctor<void (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)> biz_glGetProgramInfoLog;
#define glGetProgramInfoLog biz_glGetProgramInfoLog
extern BizOGL::GLFunctor<void (GLuint shader, GLenum pname, GLint *params)> biz_glGetShaderiv;
#define glGetShaderiv biz_glGetShaderiv
extern BizOGL::GLFunctor<void (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)> biz_glGetShaderInfoLog;
#define glGetShaderInfoLog biz_glGetShaderInfoLog
extern BizOGL::GLFunctor<void (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)> biz_glGetShaderSource;
#define glGetShaderSource biz_glGetShaderSource
extern BizOGL::GLFunctor<GLint (GLuint program, const GLchar *name)> biz_glGetUniformLocation;
#define glGetUniformLocation biz_glGetUniformLocation
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLfloat *params)> biz_glGetUniformfv;
#define glGetUniformfv biz_glGetUniformfv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLint *params)> biz_glGetUniformiv;
#define glGetUniformiv biz_glGetUniformiv
extern BizOGL::GLFunctor<void (GLuint index, GLenum pname, GLdouble *params)> biz_glGetVertexAttribdv;
#define glGetVertexAttribdv biz_glGetVertexAttribdv
extern BizOGL::GLFunctor<void (GLuint index, GLenum pname, GLfloat *params)> biz_glGetVertexAttribfv;
#define glGetVertexAttribfv biz_glGetVertexAttribfv
extern BizOGL::GLFunctor<void (GLuint index, GLenum pname, GLint *params)> biz_glGetVertexAttribiv;
#define glGetVertexAttribiv biz_glGetVertexAttribiv
extern BizOGL::GLFunctor<void (GLuint index, GLenum pname, void **pointer)> biz_glGetVertexAttribPointerv;
#define glGetVertexAttribPointerv biz_glGetVertexAttribPointerv
extern BizOGL::GLFunctor<GLboolean (GLuint program)> biz_glIsProgram;
#define glIsProgram biz_glIsProgram
extern BizOGL::GLFunctor<GLboolean (GLuint shader)> biz_glIsShader;
#define glIsShader biz_glIsShader
extern BizOGL::GLFunctor<void (GLuint program)> biz_glLinkProgram;
#define glLinkProgram biz_glLinkProgram
extern BizOGL::GLFunctor<void (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length)> biz_glShaderSource;
#define glShaderSource biz_glShaderSource
extern BizOGL::GLFunctor<void (GLuint program)> biz_glUseProgram;
#define glUseProgram biz_glUseProgram
extern BizOGL::GLFunctor<void (GLint location, GLfloat v0)> biz_glUniform1f;
#define glUniform1f biz_glUniform1f
extern BizOGL::GLFunctor<void (GLint location, GLfloat v0, GLfloat v1)> biz_glUniform2f;
#define glUniform2f biz_glUniform2f
extern BizOGL::GLFunctor<void (GLint location, GLfloat v0, GLfloat v1, GLfloat v2)> biz_glUniform3f;
#define glUniform3f biz_glUniform3f
extern BizOGL::GLFunctor<void (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)> biz_glUniform4f;
#define glUniform4f biz_glUniform4f
extern BizOGL::GLFunctor<void (GLint location, GLint v0)> biz_glUniform1i;
#define glUniform1i biz_glUniform1i
extern BizOGL::GLFunctor<void (GLint location, GLint v0, GLint v1)> biz_glUniform2i;
#define glUniform2i biz_glUniform2i
extern BizOGL::GLFunctor<void (GLint location, GLint v0, GLint v1, GLint v2)> biz_glUniform3i;
#define glUniform3i biz_glUniform3i
extern BizOGL::GLFunctor<void (GLint location, GLint v0, GLint v1, GLint v2, GLint v3)> biz_glUniform4i;
#define glUniform4i biz_glUniform4i
extern BizOGL::GLFunctor<void (GLint location, GLsizei count, const GLfloat *value)> biz_glUniform1fv;
#define glUniform1fv biz_glUniform1fv
extern BizOGL::GLFunctor<void (GLint location, GLsizei count, const GLfloat *value)> biz_glUniform2fv;
#define glUniform2fv biz_glUniform2fv
extern BizOGL::GLFunctor<void (GLint location, GLsizei count, const GLfloat *value)> biz_glUniform3fv;
#define glUniform3fv biz_glUniform3fv
extern BizOGL::GLFunctor<void (GLint location, GLsizei count, const GLfloat *value)> biz_glUniform4fv;
#define glUniform4fv biz_glUniform4fv
extern BizOGL::GLFunctor<void (GLint location, GLsizei count, const GLint *value)> biz_glUniform1iv;
#define glUniform1iv biz_glUniform1iv
extern BizOGL::GLFunctor<void (GLint location, GLsizei count, const GLint *value)> biz_glUniform2iv;
#define glUniform2iv biz_glUniform2iv
extern BizOGL::GLFunctor<void (GLint location, GLsizei count, const GLint *value)> biz_glUniform3iv;
#define glUniform3iv biz_glUniform3iv
extern BizOGL::GLFunctor<void (GLint location, GLsizei count, const GLint *value)> biz_glUniform4iv;
#define glUniform4iv biz_glUniform4iv
extern BizOGL::GLFunctor<void (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)> biz_glUniformMatrix2fv;
#define glUniformMatrix2fv biz_glUniformMatrix2fv
extern BizOGL::GLFunctor<void (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)> biz_glUniformMatrix3fv;
#define glUniformMatrix3fv biz_glUniformMatrix3fv
extern BizOGL::GLFunctor<void (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)> biz_glUniformMatrix4fv;
#define glUniformMatrix4fv biz_glUniformMatrix4fv
extern BizOGL::GLFunctor<void (GLuint program)> biz_glValidateProgram;
#define glValidateProgram biz_glValidateProgram
extern BizOGL::GLFunctor<void (GLuint index, GLdouble x)> biz_glVertexAttrib1d;
#define glVertexAttrib1d biz_glVertexAttrib1d
extern BizOGL::GLFunctor<void (GLuint index, const GLdouble *v)> biz_glVertexAttrib1dv;
#define glVertexAttrib1dv biz_glVertexAttrib1dv
extern BizOGL::GLFunctor<void (GLuint index, GLfloat x)> biz_glVertexAttrib1f;
#define glVertexAttrib1f biz_glVertexAttrib1f
extern BizOGL::GLFunctor<void (GLuint index, const GLfloat *v)> biz_glVertexAttrib1fv;
#define glVertexAttrib1fv biz_glVertexAttrib1fv
extern BizOGL::GLFunctor<void (GLuint index, GLshort x)> biz_glVertexAttrib1s;
#define glVertexAttrib1s biz_glVertexAttrib1s
extern BizOGL::GLFunctor<void (GLuint index, const GLshort *v)> biz_glVertexAttrib1sv;
#define glVertexAttrib1sv biz_glVertexAttrib1sv
extern BizOGL::GLFunctor<void (GLuint index, GLdouble x, GLdouble y)> biz_glVertexAttrib2d;
#define glVertexAttrib2d biz_glVertexAttrib2d
extern BizOGL::GLFunctor<void (GLuint index, const GLdouble *v)> biz_glVertexAttrib2dv;
#define glVertexAttrib2dv biz_glVertexAttrib2dv
extern BizOGL::GLFunctor<void (GLuint index, GLfloat x, GLfloat y)> biz_glVertexAttrib2f;
#define glVertexAttrib2f biz_glVertexAttrib2f
extern BizOGL::GLFunctor<void (GLuint index, const GLfloat *v)> biz_glVertexAttrib2fv;
#define glVertexAttrib2fv biz_glVertexAttrib2fv
extern BizOGL::GLFunctor<void (GLuint index, GLshort x, GLshort y)> biz_glVertexAttrib2s;
#define glVertexAttrib2s biz_glVertexAttrib2s
extern BizOGL::GLFunctor<void (GLuint index, const GLshort *v)> biz_glVertexAttrib2sv;
#define glVertexAttrib2sv biz_glVertexAttrib2sv
extern BizOGL::GLFunctor<void (GLuint index, GLdouble x, GLdouble y, GLdouble z)> biz_glVertexAttrib3d;
#define glVertexAttrib3d biz_glVertexAttrib3d
extern BizOGL::GLFunctor<void (GLuint index, const GLdouble *v)> biz_glVertexAttrib3dv;
#define glVertexAttrib3dv biz_glVertexAttrib3dv
extern BizOGL::GLFunctor<void (GLuint index, GLfloat x, GLfloat y, GLfloat z)> biz_glVertexAttrib3f;
#define glVertexAttrib3f biz_glVertexAttrib3f
extern BizOGL::GLFunctor<void (GLuint index, const GLfloat *v)> biz_glVertexAttrib3fv;
#define glVertexAttrib3fv biz_glVertexAttrib3fv
extern BizOGL::GLFunctor<void (GLuint index, GLshort x, GLshort y, GLshort z)> biz_glVertexAttrib3s;
#define glVertexAttrib3s biz_glVertexAttrib3s
extern BizOGL::GLFunctor<void (GLuint index, const GLshort *v)> biz_glVertexAttrib3sv;
#define glVertexAttrib3sv biz_glVertexAttrib3sv
extern BizOGL::GLFunctor<void (GLuint index, const GLbyte *v)> biz_glVertexAttrib4Nbv;
#define glVertexAttrib4Nbv biz_glVertexAttrib4Nbv
extern BizOGL::GLFunctor<void (GLuint index, const GLint *v)> biz_glVertexAttrib4Niv;
#define glVertexAttrib4Niv biz_glVertexAttrib4Niv
extern BizOGL::GLFunctor<void (GLuint index, const GLshort *v)> biz_glVertexAttrib4Nsv;
#define glVertexAttrib4Nsv biz_glVertexAttrib4Nsv
extern BizOGL::GLFunctor<void (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)> biz_glVertexAttrib4Nub;
#define glVertexAttrib4Nub biz_glVertexAttrib4Nub
extern BizOGL::GLFunctor<void (GLuint index, const GLubyte *v)> biz_glVertexAttrib4Nubv;
#define glVertexAttrib4Nubv biz_glVertexAttrib4Nubv
extern BizOGL::GLFunctor<void (GLuint index, const GLuint *v)> biz_glVertexAttrib4Nuiv;
#define glVertexAttrib4Nuiv biz_glVertexAttrib4Nuiv
extern BizOGL::GLFunctor<void (GLuint index, const GLushort *v)> biz_glVertexAttrib4Nusv;
#define glVertexAttrib4Nusv biz_glVertexAttrib4Nusv
extern BizOGL::GLFunctor<void (GLuint index, const GLbyte *v)> biz_glVertexAttrib4bv;
#define glVertexAttrib4bv biz_glVertexAttrib4bv
extern BizOGL::GLFunctor<void (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)> biz_glVertexAttrib4d;
#define glVertexAttrib4d biz_glVertexAttrib4d
extern BizOGL::GLFunctor<void (GLuint index, const GLdouble *v)> biz_glVertexAttrib4dv;
#define glVertexAttrib4dv biz_glVertexAttrib4dv
extern BizOGL::GLFunctor<void (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)> biz_glVertexAttrib4f;
#define glVertexAttrib4f biz_glVertexAttrib4f
extern BizOGL::GLFunctor<void (GLuint index, const GLfloat *v)> biz_glVertexAttrib4fv;
#define glVertexAttrib4fv biz_glVertexAttrib4fv
extern BizOGL::GLFunctor<void (GLuint index, const GLint *v)> biz_glVertexAttrib4iv;
#define glVertexAttrib4iv biz_glVertexAttrib4iv
extern BizOGL::GLFunctor<void (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)> biz_glVertexAttrib4s;
#define glVertexAttrib4s biz_glVertexAttrib4s
extern BizOGL::GLFunctor<void (GLuint index, const GLshort *v)> biz_glVertexAttrib4sv;
#define glVertexAttrib4sv biz_glVertexAttrib4sv
extern BizOGL::GLFunctor<void (GLuint index, const GLubyte *v)> biz_glVertexAttrib4ubv;
#define glVertexAttrib4ubv biz_glVertexAttrib4ubv
extern BizOGL::GLFunctor<void (GLuint index, const GLuint *v)> biz_glVertexAttrib4uiv;
#define glVertexAttrib4uiv biz_glVertexAttrib4uiv
extern BizOGL::GLFunctor<void (GLuint index, const GLushort *v)> biz_glVertexAttrib4usv;
#define glVertexAttrib4usv biz_glVertexAttrib4usv
extern BizOGL::GLFunctor<void (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer)> biz_glVertexAttribPointer;
#define glVertexAttribPointer biz_glVertexAttribPointer

#define GL_VERSION_2_1 1
extern BizOGL::GLFunctor<void (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)> biz_glUniformMatrix2x3fv;
#define glUniformMatrix2x3fv biz_glUniformMatrix2x3fv
extern BizOGL::GLFunctor<void (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)> biz_glUniformMatrix3x2fv;
#define glUniformMatrix3x2fv biz_glUniformMatrix3x2fv
extern BizOGL::GLFunctor<void (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)> biz_glUniformMatrix2x4fv;
#define glUniformMatrix2x4fv biz_glUniformMatrix2x4fv
extern BizOGL::GLFunctor<void (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)> biz_glUniformMatrix4x2fv;
#define glUniformMatrix4x2fv biz_glUniformMatrix4x2fv
extern BizOGL::GLFunctor<void (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)> biz_glUniformMatrix3x4fv;
#define glUniformMatrix3x4fv biz_glUniformMatrix3x4fv
extern BizOGL::GLFunctor<void (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)> biz_glUniformMatrix4x3fv;
#define glUniformMatrix4x3fv biz_glUniformMatrix4x3fv

#define GL_VERSION_3_0 1
extern BizOGL::GLFunctor<void (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)> biz_glColorMaski;
#define glColorMaski biz_glColorMaski
extern BizOGL::GLFunctor<void (GLenum target, GLuint index, GLboolean *data)> biz_glGetBooleani_v;
#define glGetBooleani_v biz_glGetBooleani_v
extern BizOGL::GLFunctor<void (GLenum target, GLuint index, GLint *data)> biz_glGetIntegeri_v;
#define glGetIntegeri_v biz_glGetIntegeri_v
extern BizOGL::GLFunctor<void (GLenum target, GLuint index)> biz_glEnablei;
#define glEnablei biz_glEnablei
extern BizOGL::GLFunctor<void (GLenum target, GLuint index)> biz_glDisablei;
#define glDisablei biz_glDisablei
extern BizOGL::GLFunctor<GLboolean (GLenum target, GLuint index)> biz_glIsEnabledi;
#define glIsEnabledi biz_glIsEnabledi
extern BizOGL::GLFunctor<void (GLenum primitiveMode)> biz_glBeginTransformFeedback;
#define glBeginTransformFeedback biz_glBeginTransformFeedback
extern BizOGL::GLFunctor<void (void)> biz_glEndTransformFeedback;
#define glEndTransformFeedback biz_glEndTransformFeedback
extern BizOGL::GLFunctor<void (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)> biz_glBindBufferRange;
#define glBindBufferRange biz_glBindBufferRange
extern BizOGL::GLFunctor<void (GLenum target, GLuint index, GLuint buffer)> biz_glBindBufferBase;
#define glBindBufferBase biz_glBindBufferBase
extern BizOGL::GLFunctor<void (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode)> biz_glTransformFeedbackVaryings;
#define glTransformFeedbackVaryings biz_glTransformFeedbackVaryings
extern BizOGL::GLFunctor<void (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)> biz_glGetTransformFeedbackVarying;
#define glGetTransformFeedbackVarying biz_glGetTransformFeedbackVarying
extern BizOGL::GLFunctor<void (GLenum target, GLenum clamp)> biz_glClampColor;
#define glClampColor biz_glClampColor
extern BizOGL::GLFunctor<void (GLuint id, GLenum mode)> biz_glBeginConditionalRender;
#define glBeginConditionalRender biz_glBeginConditionalRender
extern BizOGL::GLFunctor<void (void)> biz_glEndConditionalRender;
#define glEndConditionalRender biz_glEndConditionalRender
extern BizOGL::GLFunctor<void (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)> biz_glVertexAttribIPointer;
#define glVertexAttribIPointer biz_glVertexAttribIPointer
extern BizOGL::GLFunctor<void (GLuint index, GLenum pname, GLint *params)> biz_glGetVertexAttribIiv;
#define glGetVertexAttribIiv biz_glGetVertexAttribIiv
extern BizOGL::GLFunctor<void (GLuint index, GLenum pname, GLuint *params)> biz_glGetVertexAttribIuiv;
#define glGetVertexAttribIuiv biz_glGetVertexAttribIuiv
extern BizOGL::GLFunctor<void (GLuint index, GLint x)> biz_glVertexAttribI1i;
#define glVertexAttribI1i biz_glVertexAttribI1i
extern BizOGL::GLFunctor<void (GLuint index, GLint x, GLint y)> biz_glVertexAttribI2i;
#define glVertexAttribI2i biz_glVertexAttribI2i
extern BizOGL::GLFunctor<void (GLuint index, GLint x, GLint y, GLint z)> biz_glVertexAttribI3i;
#define glVertexAttribI3i biz_glVertexAttribI3i
extern BizOGL::GLFunctor<void (GLuint index, GLint x, GLint y, GLint z, GLint w)> biz_glVertexAttribI4i;
#define glVertexAttribI4i biz_glVertexAttribI4i
extern BizOGL::GLFunctor<void (GLuint index, GLuint x)> biz_glVertexAttribI1ui;
#define glVertexAttribI1ui biz_glVertexAttribI1ui
extern BizOGL::GLFunctor<void (GLuint index, GLuint x, GLuint y)> biz_glVertexAttribI2ui;
#define glVertexAttribI2ui biz_glVertexAttribI2ui
extern BizOGL::GLFunctor<void (GLuint index, GLuint x, GLuint y, GLuint z)> biz_glVertexAttribI3ui;
#define glVertexAttribI3ui biz_glVertexAttribI3ui
extern BizOGL::GLFunctor<void (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)> biz_glVertexAttribI4ui;
#define glVertexAttribI4ui biz_glVertexAttribI4ui
extern BizOGL::GLFunctor<void (GLuint index, const GLint *v)> biz_glVertexAttribI1iv;
#define glVertexAttribI1iv biz_glVertexAttribI1iv
extern BizOGL::GLFunctor<void (GLuint index, const GLint *v)> biz_glVertexAttribI2iv;
#define glVertexAttribI2iv biz_glVertexAttribI2iv
extern BizOGL::GLFunctor<void (GLuint index, const GLint *v)> biz_glVertexAttribI3iv;
#define glVertexAttribI3iv biz_glVertexAttribI3iv
extern BizOGL::GLFunctor<void (GLuint index, const GLint *v)> biz_glVertexAttribI4iv;
#define glVertexAttribI4iv biz_glVertexAttribI4iv
extern BizOGL::GLFunctor<void (GLuint index, const GLuint *v)> biz_glVertexAttribI1uiv;
#define glVertexAttribI1uiv biz_glVertexAttribI1uiv
extern BizOGL::GLFunctor<void (GLuint index, const GLuint *v)> biz_glVertexAttribI2uiv;
#define glVertexAttribI2uiv biz_glVertexAttribI2uiv
extern BizOGL::GLFunctor<void (GLuint index, const GLuint *v)> biz_glVertexAttribI3uiv;
#define glVertexAttribI3uiv biz_glVertexAttribI3uiv
extern BizOGL::GLFunctor<void (GLuint index, const GLuint *v)> biz_glVertexAttribI4uiv;
#define glVertexAttribI4uiv biz_glVertexAttribI4uiv
extern BizOGL::GLFunctor<void (GLuint index, const GLbyte *v)> biz_glVertexAttribI4bv;
#define glVertexAttribI4bv biz_glVertexAttribI4bv
extern BizOGL::GLFunctor<void (GLuint index, const GLshort *v)> biz_glVertexAttribI4sv;
#define glVertexAttribI4sv biz_glVertexAttribI4sv
extern BizOGL::GLFunctor<void (GLuint index, const GLubyte *v)> biz_glVertexAttribI4ubv;
#define glVertexAttribI4ubv biz_glVertexAttribI4ubv
extern BizOGL::GLFunctor<void (GLuint index, const GLushort *v)> biz_glVertexAttribI4usv;
#define glVertexAttribI4usv biz_glVertexAttribI4usv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLuint *params)> biz_glGetUniformuiv;
#define glGetUniformuiv biz_glGetUniformuiv
extern BizOGL::GLFunctor<void (GLuint program, GLuint color, const GLchar *name)> biz_glBindFragDataLocation;
#define glBindFragDataLocation biz_glBindFragDataLocation
extern BizOGL::GLFunctor<GLint (GLuint program, const GLchar *name)> biz_glGetFragDataLocation;
#define glGetFragDataLocation biz_glGetFragDataLocation
extern BizOGL::GLFunctor<void (GLint location, GLuint v0)> biz_glUniform1ui;
#define glUniform1ui biz_glUniform1ui
extern BizOGL::GLFunctor<void (GLint location, GLuint v0, GLuint v1)> biz_glUniform2ui;
#define glUniform2ui biz_glUniform2ui
extern BizOGL::GLFunctor<void (GLint location, GLuint v0, GLuint v1, GLuint v2)> biz_glUniform3ui;
#define glUniform3ui biz_glUniform3ui
extern BizOGL::GLFunctor<void (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)> biz_glUniform4ui;
#define glUniform4ui biz_glUniform4ui
extern BizOGL::GLFunctor<void (GLint location, GLsizei count, const GLuint *value)> biz_glUniform1uiv;
#define glUniform1uiv biz_glUniform1uiv
extern BizOGL::GLFunctor<void (GLint location, GLsizei count, const GLuint *value)> biz_glUniform2uiv;
#define glUniform2uiv biz_glUniform2uiv
extern BizOGL::GLFunctor<void (GLint location, GLsizei count, const GLuint *value)> biz_glUniform3uiv;
#define glUniform3uiv biz_glUniform3uiv
extern BizOGL::GLFunctor<void (GLint location, GLsizei count, const GLuint *value)> biz_glUniform4uiv;
#define glUniform4uiv biz_glUniform4uiv
extern BizOGL::GLFunctor<void (GLenum target, GLenum pname, const GLint *params)> biz_glTexParameterIiv;
#define glTexParameterIiv biz_glTexParameterIiv
extern BizOGL::GLFunctor<void (GLenum target, GLenum pname, const GLuint *params)> biz_glTexParameterIuiv;
#define glTexParameterIuiv biz_glTexParameterIuiv
extern BizOGL::GLFunctor<void (GLenum target, GLenum pname, GLint *params)> biz_glGetTexParameterIiv;
#define glGetTexParameterIiv biz_glGetTexParameterIiv
extern BizOGL::GLFunctor<void (GLenum target, GLenum pname, GLuint *params)> biz_glGetTexParameterIuiv;
#define glGetTexParameterIuiv biz_glGetTexParameterIuiv
extern BizOGL::GLFunctor<void (GLenum buffer, GLint drawbuffer, const GLint *value)> biz_glClearBufferiv;
#define glClearBufferiv biz_glClearBufferiv
extern BizOGL::GLFunctor<void (GLenum buffer, GLint drawbuffer, const GLuint *value)> biz_glClearBufferuiv;
#define glClearBufferuiv biz_glClearBufferuiv
extern BizOGL::GLFunctor<void (GLenum buffer, GLint drawbuffer, const GLfloat *value)> biz_glClearBufferfv;
#define glClearBufferfv biz_glClearBufferfv
extern BizOGL::GLFunctor<void (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)> biz_glClearBufferfi;
#define glClearBufferfi biz_glClearBufferfi
extern BizOGL::GLFunctor<const GLubyte * (GLenum name, GLuint index)> biz_glGetStringi;
#define glGetStringi biz_glGetStringi
extern BizOGL::GLFunctor<GLboolean (GLuint renderbuffer)> biz_glIsRenderbuffer;
#define glIsRenderbuffer biz_glIsRenderbuffer
extern BizOGL::GLFunctor<void (GLenum target, GLuint renderbuffer)> biz_glBindRenderbuffer;
#define glBindRenderbuffer biz_glBindRenderbuffer
extern BizOGL::GLFunctor<void (GLsizei n, const GLuint *renderbuffers)> biz_glDeleteRenderbuffers;
#define glDeleteRenderbuffers biz_glDeleteRenderbuffers
extern BizOGL::GLFunctor<void (GLsizei n, GLuint *renderbuffers)> biz_glGenRenderbuffers;
#define glGenRenderbuffers biz_glGenRenderbuffers
extern BizOGL::GLFunctor<void (GLenum target, GLenum internalformat, GLsizei width, GLsizei height)> biz_glRenderbufferStorage;
#define glRenderbufferStorage biz_glRenderbufferStorage
extern BizOGL::GLFunctor<void (GLenum target, GLenum pname, GLint *params)> biz_glGetRenderbufferParameteriv;
#define glGetRenderbufferParameteriv biz_glGetRenderbufferParameteriv
extern BizOGL::GLFunctor<GLboolean (GLuint framebuffer)> biz_glIsFramebuffer;
#define glIsFramebuffer biz_glIsFramebuffer
extern BizOGL::GLFunctor<void (GLenum target, GLuint framebuffer)> biz_glBindFramebuffer;
#define glBindFramebuffer biz_glBindFramebuffer
extern BizOGL::GLFunctor<void (GLsizei n, const GLuint *framebuffers)> biz_glDeleteFramebuffers;
#define glDeleteFramebuffers biz_glDeleteFramebuffers
extern BizOGL::GLFunctor<void (GLsizei n, GLuint *framebuffers)> biz_glGenFramebuffers;
#define glGenFramebuffers biz_glGenFramebuffers
extern BizOGL::GLFunctor<GLenum (GLenum target)> biz_glCheckFramebufferStatus;
#define glCheckFramebufferStatus biz_glCheckFramebufferStatus
extern BizOGL::GLFunctor<void (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)> biz_glFramebufferTexture1D;
#define glFramebufferTexture1D biz_glFramebufferTexture1D
extern BizOGL::GLFunctor<void (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)> biz_glFramebufferTexture2D;
#define glFramebufferTexture2D biz_glFramebufferTexture2D
extern BizOGL::GLFunctor<void (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)> biz_glFramebufferTexture3D;
#define glFramebufferTexture3D biz_glFramebufferTexture3D
extern BizOGL::GLFunctor<void (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)> biz_glFramebufferRenderbuffer;
#define glFramebufferRenderbuffer biz_glFramebufferRenderbuffer
extern BizOGL::GLFunctor<void (GLenum target, GLenum attachment, GLenum pname, GLint *params)> biz_glGetFramebufferAttachmentParameteriv;
#define glGetFramebufferAttachmentParameteriv biz_glGetFramebufferAttachmentParameteriv
extern BizOGL::GLFunctor<void (GLenum target)> biz_glGenerateMipmap;
#define glGenerateMipmap biz_glGenerateMipmap
extern BizOGL::GLFunctor<void (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)> biz_glBlitFramebuffer;
#define glBlitFramebuffer biz_glBlitFramebuffer
extern BizOGL::GLFunctor<void (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)> biz_glRenderbufferStorageMultisample;
#define glRenderbufferStorageMultisample biz_glRenderbufferStorageMultisample
extern BizOGL::GLFunctor<void (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)> biz_glFramebufferTextureLayer;
#define glFramebufferTextureLayer biz_glFramebufferTextureLayer
extern BizOGL::GLFunctor<void * (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)> biz_glMapBufferRange;
#define glMapBufferRange biz_glMapBufferRange
extern BizOGL::GLFunctor<void (GLenum target, GLintptr offset, GLsizeiptr length)> biz_glFlushMappedBufferRange;
#define glFlushMappedBufferRange biz_glFlushMappedBufferRange
extern BizOGL::GLFunctor<void (GLuint array)> biz_glBindVertexArray;
#define glBindVertexArray biz_glBindVertexArray
extern BizOGL::GLFunctor<void (GLsizei n, const GLuint *arrays)> biz_glDeleteVertexArrays;
#define glDeleteVertexArrays biz_glDeleteVertexArrays
extern BizOGL::GLFunctor<void (GLsizei n, GLuint *arrays)> biz_glGenVertexArrays;
#define glGenVertexArrays biz_glGenVertexArrays
extern BizOGL::GLFunctor<GLboolean (GLuint array)> biz_glIsVertexArray;
#define glIsVertexArray biz_glIsVertexArray

#define GL_VERSION_3_1 1
extern BizOGL::GLFunctor<void (GLenum mode, GLint first, GLsizei count, GLsizei instancecount)> biz_glDrawArraysInstanced;
#define glDrawArraysInstanced biz_glDrawArraysInstanced
extern BizOGL::GLFunctor<void (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount)> biz_glDrawElementsInstanced;
#define glDrawElementsInstanced biz_glDrawElementsInstanced
extern BizOGL::GLFunctor<void (GLenum target, GLenum internalformat, GLuint buffer)> biz_glTexBuffer;
#define glTexBuffer biz_glTexBuffer
extern BizOGL::GLFunctor<void (GLuint index)> biz_glPrimitiveRestartIndex;
#define glPrimitiveRestartIndex biz_glPrimitiveRestartIndex
extern BizOGL::GLFunctor<void (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)> biz_glCopyBufferSubData;
#define glCopyBufferSubData biz_glCopyBufferSubData
extern BizOGL::GLFunctor<void (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices)> biz_glGetUniformIndices;
#define glGetUniformIndices biz_glGetUniformIndices
extern BizOGL::GLFunctor<void (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)> biz_glGetActiveUniformsiv;
#define glGetActiveUniformsiv biz_glGetActiveUniformsiv
extern BizOGL::GLFunctor<void (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName)> biz_glGetActiveUniformName;
#define glGetActiveUniformName biz_glGetActiveUniformName
extern BizOGL::GLFunctor<GLuint (GLuint program, const GLchar *uniformBlockName)> biz_glGetUniformBlockIndex;
#define glGetUniformBlockIndex biz_glGetUniformBlockIndex
extern BizOGL::GLFunctor<void (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)> biz_glGetActiveUniformBlockiv;
#define glGetActiveUniformBlockiv biz_glGetActiveUniformBlockiv
extern BizOGL::GLFunctor<void (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)> biz_glGetActiveUniformBlockName;
#define glGetActiveUniformBlockName biz_glGetActiveUniformBlockName
extern BizOGL::GLFunctor<void (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)> biz_glUniformBlockBinding;
#define glUniformBlockBinding biz_glUniformBlockBinding

#define GL_VERSION_3_2 1
extern BizOGL::GLFunctor<void (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex)> biz_glDrawElementsBaseVertex;
#define glDrawElementsBaseVertex biz_glDrawElementsBaseVertex
extern BizOGL::GLFunctor<void (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex)> biz_glDrawRangeElementsBaseVertex;
#define glDrawRangeElementsBaseVertex biz_glDrawRangeElementsBaseVertex
extern BizOGL::GLFunctor<void (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex)> biz_glDrawElementsInstancedBaseVertex;
#define glDrawElementsInstancedBaseVertex biz_glDrawElementsInstancedBaseVertex
extern BizOGL::GLFunctor<void (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex)> biz_glMultiDrawElementsBaseVertex;
#define glMultiDrawElementsBaseVertex biz_glMultiDrawElementsBaseVertex
extern BizOGL::GLFunctor<void (GLenum mode)> biz_glProvokingVertex;
#define glProvokingVertex biz_glProvokingVertex
extern BizOGL::GLFunctor<GLsync (GLenum condition, GLbitfield flags)> biz_glFenceSync;
#define glFenceSync biz_glFenceSync
extern BizOGL::GLFunctor<GLboolean (GLsync sync)> biz_glIsSync;
#define glIsSync biz_glIsSync
extern BizOGL::GLFunctor<void (GLsync sync)> biz_glDeleteSync;
#define glDeleteSync biz_glDeleteSync
extern BizOGL::GLFunctor<GLenum (GLsync sync, GLbitfield flags, GLuint64 timeout)> biz_glClientWaitSync;
#define glClientWaitSync biz_glClientWaitSync
extern BizOGL::GLFunctor<void (GLsync sync, GLbitfield flags, GLuint64 timeout)> biz_glWaitSync;
#define glWaitSync biz_glWaitSync
extern BizOGL::GLFunctor<void (GLenum pname, GLint64 *data)> biz_glGetInteger64v;
#define glGetInteger64v biz_glGetInteger64v
extern BizOGL::GLFunctor<void (GLsync sync, GLenum pname, GLsizei count, GLsizei *length, GLint *values)> biz_glGetSynciv;
#define glGetSynciv biz_glGetSynciv
extern BizOGL::GLFunctor<void (GLenum target, GLuint index, GLint64 *data)> biz_glGetInteger64i_v;
#define glGetInteger64i_v biz_glGetInteger64i_v
extern BizOGL::GLFunctor<void (GLenum target, GLenum pname, GLint64 *params)> biz_glGetBufferParameteri64v;
#define glGetBufferParameteri64v biz_glGetBufferParameteri64v
extern BizOGL::GLFunctor<void (GLenum target, GLenum attachment, GLuint texture, GLint level)> biz_glFramebufferTexture;
#define glFramebufferTexture biz_glFramebufferTexture
extern BizOGL::GLFunctor<void (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)> biz_glTexImage2DMultisample;
#define glTexImage2DMultisample biz_glTexImage2DMultisample
extern BizOGL::GLFunctor<void (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)> biz_glTexImage3DMultisample;
#define glTexImage3DMultisample biz_glTexImage3DMultisample
extern BizOGL::GLFunctor<void (GLenum pname, GLuint index, GLfloat *val)> biz_glGetMultisamplefv;
#define glGetMultisamplefv biz_glGetMultisamplefv
extern BizOGL::GLFunctor<void (GLuint maskNumber, GLbitfield mask)> biz_glSampleMaski;
#define glSampleMaski biz_glSampleMaski

#define GL_VERSION_3_3 1
extern BizOGL::GLFunctor<void (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name)> biz_glBindFragDataLocationIndexed;
#define glBindFragDataLocationIndexed biz_glBindFragDataLocationIndexed
extern BizOGL::GLFunctor<GLint (GLuint program, const GLchar *name)> biz_glGetFragDataIndex;
#define glGetFragDataIndex biz_glGetFragDataIndex
extern BizOGL::GLFunctor<void (GLsizei count, GLuint *samplers)> biz_glGenSamplers;
#define glGenSamplers biz_glGenSamplers
extern BizOGL::GLFunctor<void (GLsizei count, const GLuint *samplers)> biz_glDeleteSamplers;
#define glDeleteSamplers biz_glDeleteSamplers
extern BizOGL::GLFunctor<GLboolean (GLuint sampler)> biz_glIsSampler;
#define glIsSampler biz_glIsSampler
extern BizOGL::GLFunctor<void (GLuint unit, GLuint sampler)> biz_glBindSampler;
#define glBindSampler biz_glBindSampler
extern BizOGL::GLFunctor<void (GLuint sampler, GLenum pname, GLint param)> biz_glSamplerParameteri;
#define glSamplerParameteri biz_glSamplerParameteri
extern BizOGL::GLFunctor<void (GLuint sampler, GLenum pname, const GLint *param)> biz_glSamplerParameteriv;
#define glSamplerParameteriv biz_glSamplerParameteriv
extern BizOGL::GLFunctor<void (GLuint sampler, GLenum pname, GLfloat param)> biz_glSamplerParameterf;
#define glSamplerParameterf biz_glSamplerParameterf
extern BizOGL::GLFunctor<void (GLuint sampler, GLenum pname, const GLfloat *param)> biz_glSamplerParameterfv;
#define glSamplerParameterfv biz_glSamplerParameterfv
extern BizOGL::GLFunctor<void (GLuint sampler, GLenum pname, const GLint *param)> biz_glSamplerParameterIiv;
#define glSamplerParameterIiv biz_glSamplerParameterIiv
extern BizOGL::GLFunctor<void (GLuint sampler, GLenum pname, const GLuint *param)> biz_glSamplerParameterIuiv;
#define glSamplerParameterIuiv biz_glSamplerParameterIuiv
extern BizOGL::GLFunctor<void (GLuint sampler, GLenum pname, GLint *params)> biz_glGetSamplerParameteriv;
#define glGetSamplerParameteriv biz_glGetSamplerParameteriv
extern BizOGL::GLFunctor<void (GLuint sampler, GLenum pname, GLint *params)> biz_glGetSamplerParameterIiv;
#define glGetSamplerParameterIiv biz_glGetSamplerParameterIiv
extern BizOGL::GLFunctor<void (GLuint sampler, GLenum pname, GLfloat *params)> biz_glGetSamplerParameterfv;
#define glGetSamplerParameterfv biz_glGetSamplerParameterfv
extern BizOGL::GLFunctor<void (GLuint sampler, GLenum pname, GLuint *params)> biz_glGetSamplerParameterIuiv;
#define glGetSamplerParameterIuiv biz_glGetSamplerParameterIuiv
extern BizOGL::GLFunctor<void (GLuint id, GLenum target)> biz_glQueryCounter;
#define glQueryCounter biz_glQueryCounter
extern BizOGL::GLFunctor<void (GLuint id, GLenum pname, GLint64 *params)> biz_glGetQueryObjecti64v;
#define glGetQueryObjecti64v biz_glGetQueryObjecti64v
extern BizOGL::GLFunctor<void (GLuint id, GLenum pname, GLuint64 *params)> biz_glGetQueryObjectui64v;
#define glGetQueryObjectui64v biz_glGetQueryObjectui64v
extern BizOGL::GLFunctor<void (GLuint index, GLuint divisor)> biz_glVertexAttribDivisor;
#define glVertexAttribDivisor biz_glVertexAttribDivisor
extern BizOGL::GLFunctor<void (GLuint index, GLenum type, GLboolean normalized, GLuint value)> biz_glVertexAttribP1ui;
#define glVertexAttribP1ui biz_glVertexAttribP1ui
extern BizOGL::GLFunctor<void (GLuint index, GLenum type, GLboolean normalized, const GLuint *value)> biz_glVertexAttribP1uiv;
#define glVertexAttribP1uiv biz_glVertexAttribP1uiv
extern BizOGL::GLFunctor<void (GLuint index, GLenum type, GLboolean normalized, GLuint value)> biz_glVertexAttribP2ui;
#define glVertexAttribP2ui biz_glVertexAttribP2ui
extern BizOGL::GLFunctor<void (GLuint index, GLenum type, GLboolean normalized, const GLuint *value)> biz_glVertexAttribP2uiv;
#define glVertexAttribP2uiv biz_glVertexAttribP2uiv
extern BizOGL::GLFunctor<void (GLuint index, GLenum type, GLboolean normalized, GLuint value)> biz_glVertexAttribP3ui;
#define glVertexAttribP3ui biz_glVertexAttribP3ui
extern BizOGL::GLFunctor<void (GLuint index, GLenum type, GLboolean normalized, const GLuint *value)> biz_glVertexAttribP3uiv;
#define glVertexAttribP3uiv biz_glVertexAttribP3uiv
extern BizOGL::GLFunctor<void (GLuint index, GLenum type, GLboolean normalized, GLuint value)> biz_glVertexAttribP4ui;
#define glVertexAttribP4ui biz_glVertexAttribP4ui
extern BizOGL::GLFunctor<void (GLuint index, GLenum type, GLboolean normalized, const GLuint *value)> biz_glVertexAttribP4uiv;
#define glVertexAttribP4uiv biz_glVertexAttribP4uiv
extern BizOGL::GLFunctor<void (GLenum type, GLuint value)> biz_glVertexP2ui;
#define glVertexP2ui biz_glVertexP2ui
extern BizOGL::GLFunctor<void (GLenum type, const GLuint *value)> biz_glVertexP2uiv;
#define glVertexP2uiv biz_glVertexP2uiv
extern BizOGL::GLFunctor<void (GLenum type, GLuint value)> biz_glVertexP3ui;
#define glVertexP3ui biz_glVertexP3ui
extern BizOGL::GLFunctor<void (GLenum type, const GLuint *value)> biz_glVertexP3uiv;
#define glVertexP3uiv biz_glVertexP3uiv
extern BizOGL::GLFunctor<void (GLenum type, GLuint value)> biz_glVertexP4ui;
#define glVertexP4ui biz_glVertexP4ui
extern BizOGL::GLFunctor<void (GLenum type, const GLuint *value)> biz_glVertexP4uiv;
#define glVertexP4uiv biz_glVertexP4uiv
extern BizOGL::GLFunctor<void (GLenum type, GLuint coords)> biz_glTexCoordP1ui;
#define glTexCoordP1ui biz_glTexCoordP1ui
extern BizOGL::GLFunctor<void (GLenum type, const GLuint *coords)> biz_glTexCoordP1uiv;
#define glTexCoordP1uiv biz_glTexCoordP1uiv
extern BizOGL::GLFunctor<void (GLenum type, GLuint coords)> biz_glTexCoordP2ui;
#define glTexCoordP2ui biz_glTexCoordP2ui
extern BizOGL::GLFunctor<void (GLenum type, const GLuint *coords)> biz_glTexCoordP2uiv;
#define glTexCoordP2uiv biz_glTexCoordP2uiv
extern BizOGL::GLFunctor<void (GLenum type, GLuint coords)> biz_glTexCoordP3ui;
#define glTexCoordP3ui biz_glTexCoordP3ui
extern BizOGL::GLFunctor<void (GLenum type, const GLuint *coords)> biz_glTexCoordP3uiv;
#define glTexCoordP3uiv biz_glTexCoordP3uiv
extern BizOGL::GLFunctor<void (GLenum type, GLuint coords)> biz_glTexCoordP4ui;
#define glTexCoordP4ui biz_glTexCoordP4ui
extern BizOGL::GLFunctor<void (GLenum type, const GLuint *coords)> biz_glTexCoordP4uiv;
#define glTexCoordP4uiv biz_glTexCoordP4uiv
extern BizOGL::GLFunctor<void (GLenum texture, GLenum type, GLuint coords)> biz_glMultiTexCoordP1ui;
#define glMultiTexCoordP1ui biz_glMultiTexCoordP1ui
extern BizOGL::GLFunctor<void (GLenum texture, GLenum type, const GLuint *coords)> biz_glMultiTexCoordP1uiv;
#define glMultiTexCoordP1uiv biz_glMultiTexCoordP1uiv
extern BizOGL::GLFunctor<void (GLenum texture, GLenum type, GLuint coords)> biz_glMultiTexCoordP2ui;
#define glMultiTexCoordP2ui biz_glMultiTexCoordP2ui
extern BizOGL::GLFunctor<void (GLenum texture, GLenum type, const GLuint *coords)> biz_glMultiTexCoordP2uiv;
#define glMultiTexCoordP2uiv biz_glMultiTexCoordP2uiv
extern BizOGL::GLFunctor<void (GLenum texture, GLenum type, GLuint coords)> biz_glMultiTexCoordP3ui;
#define glMultiTexCoordP3ui biz_glMultiTexCoordP3ui
extern BizOGL::GLFunctor<void (GLenum texture, GLenum type, const GLuint *coords)> biz_glMultiTexCoordP3uiv;
#define glMultiTexCoordP3uiv biz_glMultiTexCoordP3uiv
extern BizOGL::GLFunctor<void (GLenum texture, GLenum type, GLuint coords)> biz_glMultiTexCoordP4ui;
#define glMultiTexCoordP4ui biz_glMultiTexCoordP4ui
extern BizOGL::GLFunctor<void (GLenum texture, GLenum type, const GLuint *coords)> biz_glMultiTexCoordP4uiv;
#define glMultiTexCoordP4uiv biz_glMultiTexCoordP4uiv
extern BizOGL::GLFunctor<void (GLenum type, GLuint coords)> biz_glNormalP3ui;
#define glNormalP3ui biz_glNormalP3ui
extern BizOGL::GLFunctor<void (GLenum type, const GLuint *coords)> biz_glNormalP3uiv;
#define glNormalP3uiv biz_glNormalP3uiv
extern BizOGL::GLFunctor<void (GLenum type, GLuint color)> biz_glColorP3ui;
#define glColorP3ui biz_glColorP3ui
extern BizOGL::GLFunctor<void (GLenum type, const GLuint *color)> biz_glColorP3uiv;
#define glColorP3uiv biz_glColorP3uiv
extern BizOGL::GLFunctor<void (GLenum type, GLuint color)> biz_glColorP4ui;
#define glColorP4ui biz_glColorP4ui
extern BizOGL::GLFunctor<void (GLenum type, const GLuint *color)> biz_glColorP4uiv;
#define glColorP4uiv biz_glColorP4uiv
extern BizOGL::GLFunctor<void (GLenum type, GLuint color)> biz_glSecondaryColorP3ui;
#define glSecondaryColorP3ui biz_glSecondaryColorP3ui
extern BizOGL::GLFunctor<void (GLenum type, const GLuint *color)> biz_glSecondaryColorP3uiv;
#define glSecondaryColorP3uiv biz_glSecondaryColorP3uiv

#define GL_VERSION_4_0 1
extern BizOGL::GLFunctor<void (GLfloat value)> biz_glMinSampleShading;
#define glMinSampleShading biz_glMinSampleShading
extern BizOGL::GLFunctor<void (GLuint buf, GLenum mode)> biz_glBlendEquationi;
#define glBlendEquationi biz_glBlendEquationi
extern BizOGL::GLFunctor<void (GLuint buf, GLenum modeRGB, GLenum modeAlpha)> biz_glBlendEquationSeparatei;
#define glBlendEquationSeparatei biz_glBlendEquationSeparatei
extern BizOGL::GLFunctor<void (GLuint buf, GLenum src, GLenum dst)> biz_glBlendFunci;
#define glBlendFunci biz_glBlendFunci
extern BizOGL::GLFunctor<void (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)> biz_glBlendFuncSeparatei;
#define glBlendFuncSeparatei biz_glBlendFuncSeparatei
extern BizOGL::GLFunctor<void (GLenum mode, const void *indirect)> biz_glDrawArraysIndirect;
#define glDrawArraysIndirect biz_glDrawArraysIndirect
extern BizOGL::GLFunctor<void (GLenum mode, GLenum type, const void *indirect)> biz_glDrawElementsIndirect;
#define glDrawElementsIndirect biz_glDrawElementsIndirect
extern BizOGL::GLFunctor<void (GLint location, GLdouble x)> biz_glUniform1d;
#define glUniform1d biz_glUniform1d
extern BizOGL::GLFunctor<void (GLint location, GLdouble x, GLdouble y)> biz_glUniform2d;
#define glUniform2d biz_glUniform2d
extern BizOGL::GLFunctor<void (GLint location, GLdouble x, GLdouble y, GLdouble z)> biz_glUniform3d;
#define glUniform3d biz_glUniform3d
extern BizOGL::GLFunctor<void (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)> biz_glUniform4d;
#define glUniform4d biz_glUniform4d
extern BizOGL::GLFunctor<void (GLint location, GLsizei count, const GLdouble *value)> biz_glUniform1dv;
#define glUniform1dv biz_glUniform1dv
extern BizOGL::GLFunctor<void (GLint location, GLsizei count, const GLdouble *value)> biz_glUniform2dv;
#define glUniform2dv biz_glUniform2dv
extern BizOGL::GLFunctor<void (GLint location, GLsizei count, const GLdouble *value)> biz_glUniform3dv;
#define glUniform3dv biz_glUniform3dv
extern BizOGL::GLFunctor<void (GLint location, GLsizei count, const GLdouble *value)> biz_glUniform4dv;
#define glUniform4dv biz_glUniform4dv
extern BizOGL::GLFunctor<void (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)> biz_glUniformMatrix2dv;
#define glUniformMatrix2dv biz_glUniformMatrix2dv
extern BizOGL::GLFunctor<void (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)> biz_glUniformMatrix3dv;
#define glUniformMatrix3dv biz_glUniformMatrix3dv
extern BizOGL::GLFunctor<void (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)> biz_glUniformMatrix4dv;
#define glUniformMatrix4dv biz_glUniformMatrix4dv
extern BizOGL::GLFunctor<void (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)> biz_glUniformMatrix2x3dv;
#define glUniformMatrix2x3dv biz_glUniformMatrix2x3dv
extern BizOGL::GLFunctor<void (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)> biz_glUniformMatrix2x4dv;
#define glUniformMatrix2x4dv biz_glUniformMatrix2x4dv
extern BizOGL::GLFunctor<void (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)> biz_glUniformMatrix3x2dv;
#define glUniformMatrix3x2dv biz_glUniformMatrix3x2dv
extern BizOGL::GLFunctor<void (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)> biz_glUniformMatrix3x4dv;
#define glUniformMatrix3x4dv biz_glUniformMatrix3x4dv
extern BizOGL::GLFunctor<void (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)> biz_glUniformMatrix4x2dv;
#define glUniformMatrix4x2dv biz_glUniformMatrix4x2dv
extern BizOGL::GLFunctor<void (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)> biz_glUniformMatrix4x3dv;
#define glUniformMatrix4x3dv biz_glUniformMatrix4x3dv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLdouble *params)> biz_glGetUniformdv;
#define glGetUniformdv biz_glGetUniformdv
extern BizOGL::GLFunctor<GLint (GLuint program, GLenum shadertype, const GLchar *name)> biz_glGetSubroutineUniformLocation;
#define glGetSubroutineUniformLocation biz_glGetSubroutineUniformLocation
extern BizOGL::GLFunctor<GLuint (GLuint program, GLenum shadertype, const GLchar *name)> biz_glGetSubroutineIndex;
#define glGetSubroutineIndex biz_glGetSubroutineIndex
extern BizOGL::GLFunctor<void (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values)> biz_glGetActiveSubroutineUniformiv;
#define glGetActiveSubroutineUniformiv biz_glGetActiveSubroutineUniformiv
extern BizOGL::GLFunctor<void (GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)> biz_glGetActiveSubroutineUniformName;
#define glGetActiveSubroutineUniformName biz_glGetActiveSubroutineUniformName
extern BizOGL::GLFunctor<void (GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)> biz_glGetActiveSubroutineName;
#define glGetActiveSubroutineName biz_glGetActiveSubroutineName
extern BizOGL::GLFunctor<void (GLenum shadertype, GLsizei count, const GLuint *indices)> biz_glUniformSubroutinesuiv;
#define glUniformSubroutinesuiv biz_glUniformSubroutinesuiv
extern BizOGL::GLFunctor<void (GLenum shadertype, GLint location, GLuint *params)> biz_glGetUniformSubroutineuiv;
#define glGetUniformSubroutineuiv biz_glGetUniformSubroutineuiv
extern BizOGL::GLFunctor<void (GLuint program, GLenum shadertype, GLenum pname, GLint *values)> biz_glGetProgramStageiv;
#define glGetProgramStageiv biz_glGetProgramStageiv
extern BizOGL::GLFunctor<void (GLenum pname, GLint value)> biz_glPatchParameteri;
#define glPatchParameteri biz_glPatchParameteri
extern BizOGL::GLFunctor<void (GLenum pname, const GLfloat *values)> biz_glPatchParameterfv;
#define glPatchParameterfv biz_glPatchParameterfv
extern BizOGL::GLFunctor<void (GLenum target, GLuint id)> biz_glBindTransformFeedback;
#define glBindTransformFeedback biz_glBindTransformFeedback
extern BizOGL::GLFunctor<void (GLsizei n, const GLuint *ids)> biz_glDeleteTransformFeedbacks;
#define glDeleteTransformFeedbacks biz_glDeleteTransformFeedbacks
extern BizOGL::GLFunctor<void (GLsizei n, GLuint *ids)> biz_glGenTransformFeedbacks;
#define glGenTransformFeedbacks biz_glGenTransformFeedbacks
extern BizOGL::GLFunctor<GLboolean (GLuint id)> biz_glIsTransformFeedback;
#define glIsTransformFeedback biz_glIsTransformFeedback
extern BizOGL::GLFunctor<void (void)> biz_glPauseTransformFeedback;
#define glPauseTransformFeedback biz_glPauseTransformFeedback
extern BizOGL::GLFunctor<void (void)> biz_glResumeTransformFeedback;
#define glResumeTransformFeedback biz_glResumeTransformFeedback
extern BizOGL::GLFunctor<void (GLenum mode, GLuint id)> biz_glDrawTransformFeedback;
#define glDrawTransformFeedback biz_glDrawTransformFeedback
extern BizOGL::GLFunctor<void (GLenum mode, GLuint id, GLuint stream)> biz_glDrawTransformFeedbackStream;
#define glDrawTransformFeedbackStream biz_glDrawTransformFeedbackStream
extern BizOGL::GLFunctor<void (GLenum target, GLuint index, GLuint id)> biz_glBeginQueryIndexed;
#define glBeginQueryIndexed biz_glBeginQueryIndexed
extern BizOGL::GLFunctor<void (GLenum target, GLuint index)> biz_glEndQueryIndexed;
#define glEndQueryIndexed biz_glEndQueryIndexed
extern BizOGL::GLFunctor<void (GLenum target, GLuint index, GLenum pname, GLint *params)> biz_glGetQueryIndexediv;
#define glGetQueryIndexediv biz_glGetQueryIndexediv

#define GL_VERSION_4_1 1
extern BizOGL::GLFunctor<void (void)> biz_glReleaseShaderCompiler;
#define glReleaseShaderCompiler biz_glReleaseShaderCompiler
extern BizOGL::GLFunctor<void (GLsizei count, const GLuint *shaders, GLenum binaryFormat, const void *binary, GLsizei length)> biz_glShaderBinary;
#define glShaderBinary biz_glShaderBinary
extern BizOGL::GLFunctor<void (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)> biz_glGetShaderPrecisionFormat;
#define glGetShaderPrecisionFormat biz_glGetShaderPrecisionFormat
extern BizOGL::GLFunctor<void (GLfloat n, GLfloat f)> biz_glDepthRangef;
#define glDepthRangef biz_glDepthRangef
extern BizOGL::GLFunctor<void (GLfloat d)> biz_glClearDepthf;
#define glClearDepthf biz_glClearDepthf
extern BizOGL::GLFunctor<void (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary)> biz_glGetProgramBinary;
#define glGetProgramBinary biz_glGetProgramBinary
extern BizOGL::GLFunctor<void (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length)> biz_glProgramBinary;
#define glProgramBinary biz_glProgramBinary
extern BizOGL::GLFunctor<void (GLuint program, GLenum pname, GLint value)> biz_glProgramParameteri;
#define glProgramParameteri biz_glProgramParameteri
extern BizOGL::GLFunctor<void (GLuint pipeline, GLbitfield stages, GLuint program)> biz_glUseProgramStages;
#define glUseProgramStages biz_glUseProgramStages
extern BizOGL::GLFunctor<void (GLuint pipeline, GLuint program)> biz_glActiveShaderProgram;
#define glActiveShaderProgram biz_glActiveShaderProgram
extern BizOGL::GLFunctor<GLuint (GLenum type, GLsizei count, const GLchar *const*strings)> biz_glCreateShaderProgramv;
#define glCreateShaderProgramv biz_glCreateShaderProgramv
extern BizOGL::GLFunctor<void (GLuint pipeline)> biz_glBindProgramPipeline;
#define glBindProgramPipeline biz_glBindProgramPipeline
extern BizOGL::GLFunctor<void (GLsizei n, const GLuint *pipelines)> biz_glDeleteProgramPipelines;
#define glDeleteProgramPipelines biz_glDeleteProgramPipelines
extern BizOGL::GLFunctor<void (GLsizei n, GLuint *pipelines)> biz_glGenProgramPipelines;
#define glGenProgramPipelines biz_glGenProgramPipelines
extern BizOGL::GLFunctor<GLboolean (GLuint pipeline)> biz_glIsProgramPipeline;
#define glIsProgramPipeline biz_glIsProgramPipeline
extern BizOGL::GLFunctor<void (GLuint pipeline, GLenum pname, GLint *params)> biz_glGetProgramPipelineiv;
#define glGetProgramPipelineiv biz_glGetProgramPipelineiv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLint v0)> biz_glProgramUniform1i;
#define glProgramUniform1i biz_glProgramUniform1i
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLsizei count, const GLint *value)> biz_glProgramUniform1iv;
#define glProgramUniform1iv biz_glProgramUniform1iv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLfloat v0)> biz_glProgramUniform1f;
#define glProgramUniform1f biz_glProgramUniform1f
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLsizei count, const GLfloat *value)> biz_glProgramUniform1fv;
#define glProgramUniform1fv biz_glProgramUniform1fv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLdouble v0)> biz_glProgramUniform1d;
#define glProgramUniform1d biz_glProgramUniform1d
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLsizei count, const GLdouble *value)> biz_glProgramUniform1dv;
#define glProgramUniform1dv biz_glProgramUniform1dv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLuint v0)> biz_glProgramUniform1ui;
#define glProgramUniform1ui biz_glProgramUniform1ui
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLsizei count, const GLuint *value)> biz_glProgramUniform1uiv;
#define glProgramUniform1uiv biz_glProgramUniform1uiv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLint v0, GLint v1)> biz_glProgramUniform2i;
#define glProgramUniform2i biz_glProgramUniform2i
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLsizei count, const GLint *value)> biz_glProgramUniform2iv;
#define glProgramUniform2iv biz_glProgramUniform2iv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLfloat v0, GLfloat v1)> biz_glProgramUniform2f;
#define glProgramUniform2f biz_glProgramUniform2f
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLsizei count, const GLfloat *value)> biz_glProgramUniform2fv;
#define glProgramUniform2fv biz_glProgramUniform2fv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLdouble v0, GLdouble v1)> biz_glProgramUniform2d;
#define glProgramUniform2d biz_glProgramUniform2d
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLsizei count, const GLdouble *value)> biz_glProgramUniform2dv;
#define glProgramUniform2dv biz_glProgramUniform2dv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLuint v0, GLuint v1)> biz_glProgramUniform2ui;
#define glProgramUniform2ui biz_glProgramUniform2ui
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLsizei count, const GLuint *value)> biz_glProgramUniform2uiv;
#define glProgramUniform2uiv biz_glProgramUniform2uiv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLint v0, GLint v1, GLint v2)> biz_glProgramUniform3i;
#define glProgramUniform3i biz_glProgramUniform3i
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLsizei count, const GLint *value)> biz_glProgramUniform3iv;
#define glProgramUniform3iv biz_glProgramUniform3iv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)> biz_glProgramUniform3f;
#define glProgramUniform3f biz_glProgramUniform3f
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLsizei count, const GLfloat *value)> biz_glProgramUniform3fv;
#define glProgramUniform3fv biz_glProgramUniform3fv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2)> biz_glProgramUniform3d;
#define glProgramUniform3d biz_glProgramUniform3d
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLsizei count, const GLdouble *value)> biz_glProgramUniform3dv;
#define glProgramUniform3dv biz_glProgramUniform3dv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)> biz_glProgramUniform3ui;
#define glProgramUniform3ui biz_glProgramUniform3ui
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLsizei count, const GLuint *value)> biz_glProgramUniform3uiv;
#define glProgramUniform3uiv biz_glProgramUniform3uiv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)> biz_glProgramUniform4i;
#define glProgramUniform4i biz_glProgramUniform4i
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLsizei count, const GLint *value)> biz_glProgramUniform4iv;
#define glProgramUniform4iv biz_glProgramUniform4iv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)> biz_glProgramUniform4f;
#define glProgramUniform4f biz_glProgramUniform4f
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLsizei count, const GLfloat *value)> biz_glProgramUniform4fv;
#define glProgramUniform4fv biz_glProgramUniform4fv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3)> biz_glProgramUniform4d;
#define glProgramUniform4d biz_glProgramUniform4d
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLsizei count, const GLdouble *value)> biz_glProgramUniform4dv;
#define glProgramUniform4dv biz_glProgramUniform4dv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)> biz_glProgramUniform4ui;
#define glProgramUniform4ui biz_glProgramUniform4ui
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLsizei count, const GLuint *value)> biz_glProgramUniform4uiv;
#define glProgramUniform4uiv biz_glProgramUniform4uiv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)> biz_glProgramUniformMatrix2fv;
#define glProgramUniformMatrix2fv biz_glProgramUniformMatrix2fv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)> biz_glProgramUniformMatrix3fv;
#define glProgramUniformMatrix3fv biz_glProgramUniformMatrix3fv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)> biz_glProgramUniformMatrix4fv;
#define glProgramUniformMatrix4fv biz_glProgramUniformMatrix4fv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)> biz_glProgramUniformMatrix2dv;
#define glProgramUniformMatrix2dv biz_glProgramUniformMatrix2dv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)> biz_glProgramUniformMatrix3dv;
#define glProgramUniformMatrix3dv biz_glProgramUniformMatrix3dv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)> biz_glProgramUniformMatrix4dv;
#define glProgramUniformMatrix4dv biz_glProgramUniformMatrix4dv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)> biz_glProgramUniformMatrix2x3fv;
#define glProgramUniformMatrix2x3fv biz_glProgramUniformMatrix2x3fv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)> biz_glProgramUniformMatrix3x2fv;
#define glProgramUniformMatrix3x2fv biz_glProgramUniformMatrix3x2fv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)> biz_glProgramUniformMatrix2x4fv;
#define glProgramUniformMatrix2x4fv biz_glProgramUniformMatrix2x4fv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)> biz_glProgramUniformMatrix4x2fv;
#define glProgramUniformMatrix4x2fv biz_glProgramUniformMatrix4x2fv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)> biz_glProgramUniformMatrix3x4fv;
#define glProgramUniformMatrix3x4fv biz_glProgramUniformMatrix3x4fv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)> biz_glProgramUniformMatrix4x3fv;
#define glProgramUniformMatrix4x3fv biz_glProgramUniformMatrix4x3fv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)> biz_glProgramUniformMatrix2x3dv;
#define glProgramUniformMatrix2x3dv biz_glProgramUniformMatrix2x3dv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)> biz_glProgramUniformMatrix3x2dv;
#define glProgramUniformMatrix3x2dv biz_glProgramUniformMatrix3x2dv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)> biz_glProgramUniformMatrix2x4dv;
#define glProgramUniformMatrix2x4dv biz_glProgramUniformMatrix2x4dv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)> biz_glProgramUniformMatrix4x2dv;
#define glProgramUniformMatrix4x2dv biz_glProgramUniformMatrix4x2dv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)> biz_glProgramUniformMatrix3x4dv;
#define glProgramUniformMatrix3x4dv biz_glProgramUniformMatrix3x4dv
extern BizOGL::GLFunctor<void (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)> biz_glProgramUniformMatrix4x3dv;
#define glProgramUniformMatrix4x3dv biz_glProgramUniformMatrix4x3dv
extern BizOGL::GLFunctor<void (GLuint pipeline)> biz_glValidateProgramPipeline;
#define glValidateProgramPipeline biz_glValidateProgramPipeline
extern BizOGL::GLFunctor<void (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog)> biz_glGetProgramPipelineInfoLog;
#define glGetProgramPipelineInfoLog biz_glGetProgramPipelineInfoLog
extern BizOGL::GLFunctor<void (GLuint index, GLdouble x)> biz_glVertexAttribL1d;
#define glVertexAttribL1d biz_glVertexAttribL1d
extern BizOGL::GLFunctor<void (GLuint index, GLdouble x, GLdouble y)> biz_glVertexAttribL2d;
#define glVertexAttribL2d biz_glVertexAttribL2d
extern BizOGL::GLFunctor<void (GLuint index, GLdouble x, GLdouble y, GLdouble z)> biz_glVertexAttribL3d;
#define glVertexAttribL3d biz_glVertexAttribL3d
extern BizOGL::GLFunctor<void (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)> biz_glVertexAttribL4d;
#define glVertexAttribL4d biz_glVertexAttribL4d
extern BizOGL::GLFunctor<void (GLuint index, const GLdouble *v)> biz_glVertexAttribL1dv;
#define glVertexAttribL1dv biz_glVertexAttribL1dv
extern BizOGL::GLFunctor<void (GLuint index, const GLdouble *v)> biz_glVertexAttribL2dv;
#define glVertexAttribL2dv biz_glVertexAttribL2dv
extern BizOGL::GLFunctor<void (GLuint index, const GLdouble *v)> biz_glVertexAttribL3dv;
#define glVertexAttribL3dv biz_glVertexAttribL3dv
extern BizOGL::GLFunctor<void (GLuint index, const GLdouble *v)> biz_glVertexAttribL4dv;
#define glVertexAttribL4dv biz_glVertexAttribL4dv
extern BizOGL::GLFunctor<void (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)> biz_glVertexAttribLPointer;
#define glVertexAttribLPointer biz_glVertexAttribLPointer
extern BizOGL::GLFunctor<void (GLuint index, GLenum pname, GLdouble *params)> biz_glGetVertexAttribLdv;
#define glGetVertexAttribLdv biz_glGetVertexAttribLdv
extern BizOGL::GLFunctor<void (GLuint first, GLsizei count, const GLfloat *v)> biz_glViewportArrayv;
#define glViewportArrayv biz_glViewportArrayv
extern BizOGL::GLFunctor<void (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)> biz_glViewportIndexedf;
#define glViewportIndexedf biz_glViewportIndexedf
extern BizOGL::GLFunctor<void (GLuint index, const GLfloat *v)> biz_glViewportIndexedfv;
#define glViewportIndexedfv biz_glViewportIndexedfv
extern BizOGL::GLFunctor<void (GLuint first, GLsizei count, const GLint *v)> biz_glScissorArrayv;
#define glScissorArrayv biz_glScissorArrayv
extern BizOGL::GLFunctor<void (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)> biz_glScissorIndexed;
#define glScissorIndexed biz_glScissorIndexed
extern BizOGL::GLFunctor<void (GLuint index, const GLint *v)> biz_glScissorIndexedv;
#define glScissorIndexedv biz_glScissorIndexedv
extern BizOGL::GLFunctor<void (GLuint first, GLsizei count, const GLdouble *v)> biz_glDepthRangeArrayv;
#define glDepthRangeArrayv biz_glDepthRangeArrayv
extern BizOGL::GLFunctor<void (GLuint index, GLdouble n, GLdouble f)> biz_glDepthRangeIndexed;
#define glDepthRangeIndexed biz_glDepthRangeIndexed
extern BizOGL::GLFunctor<void (GLenum target, GLuint index, GLfloat *data)> biz_glGetFloati_v;
#define glGetFloati_v biz_glGetFloati_v
extern BizOGL::GLFunctor<void (GLenum target, GLuint index, GLdouble *data)> biz_glGetDoublei_v;
#define glGetDoublei_v biz_glGetDoublei_v

#define GL_VERSION_4_2 1
extern BizOGL::GLFunctor<void (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance)> biz_glDrawArraysInstancedBaseInstance;
#define glDrawArraysInstancedBaseInstance biz_glDrawArraysInstancedBaseInstance
extern BizOGL::GLFunctor<void (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance)> biz_glDrawElementsInstancedBaseInstance;
#define glDrawElementsInstancedBaseInstance biz_glDrawElementsInstancedBaseInstance
extern BizOGL::GLFunctor<void (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance)> biz_glDrawElementsInstancedBaseVertexBaseInstance;
#define glDrawElementsInstancedBaseVertexBaseInstance biz_glDrawElementsInstancedBaseVertexBaseInstance
extern BizOGL::GLFunctor<void (GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint *params)> biz_glGetInternalformativ;
#define glGetInternalformativ biz_glGetInternalformativ
extern BizOGL::GLFunctor<void (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params)> biz_glGetActiveAtomicCounterBufferiv;
#define glGetActiveAtomicCounterBufferiv biz_glGetActiveAtomicCounterBufferiv
extern BizOGL::GLFunctor<void (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)> biz_glBindImageTexture;
#define glBindImageTexture biz_glBindImageTexture
extern BizOGL::GLFunctor<void (GLbitfield barriers)> biz_glMemoryBarrier;
#define glMemoryBarrier biz_glMemoryBarrier
extern BizOGL::GLFunctor<void (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)> biz_glTexStorage1D;
#define glTexStorage1D biz_glTexStorage1D
extern BizOGL::GLFunctor<void (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)> biz_glTexStorage2D;
#define glTexStorage2D biz_glTexStorage2D
extern BizOGL::GLFunctor<void (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)> biz_glTexStorage3D;
#define glTexStorage3D biz_glTexStorage3D
extern BizOGL::GLFunctor<void (GLenum mode, GLuint id, GLsizei instancecount)> biz_glDrawTransformFeedbackInstanced;
#define glDrawTransformFeedbackInstanced biz_glDrawTransformFeedbackInstanced
extern BizOGL::GLFunctor<void (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount)> biz_glDrawTransformFeedbackStreamInstanced;
#define glDrawTransformFeedbackStreamInstanced biz_glDrawTransformFeedbackStreamInstanced

#define GL_VERSION_4_3 1
extern BizOGL::GLFunctor<void (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data)> biz_glClearBufferData;
#define glClearBufferData biz_glClearBufferData
extern BizOGL::GLFunctor<void (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data)> biz_glClearBufferSubData;
#define glClearBufferSubData biz_glClearBufferSubData
extern BizOGL::GLFunctor<void (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)> biz_glDispatchCompute;
#define glDispatchCompute biz_glDispatchCompute
extern BizOGL::GLFunctor<void (GLintptr indirect)> biz_glDispatchComputeIndirect;
#define glDispatchComputeIndirect biz_glDispatchComputeIndirect
extern BizOGL::GLFunctor<void (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)> biz_glCopyImageSubData;
#define glCopyImageSubData biz_glCopyImageSubData
extern BizOGL::GLFunctor<void (GLenum target, GLenum pname, GLint param)> biz_glFramebufferParameteri;
#define glFramebufferParameteri biz_glFramebufferParameteri
extern BizOGL::GLFunctor<void (GLenum target, GLenum pname, GLint *params)> biz_glGetFramebufferParameteriv;
#define glGetFramebufferParameteriv biz_glGetFramebufferParameteriv
extern BizOGL::GLFunctor<void (GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 *params)> biz_glGetInternalformati64v;
#define glGetInternalformati64v biz_glGetInternalformati64v
extern BizOGL::GLFunctor<void (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)> biz_glInvalidateTexSubImage;
#define glInvalidateTexSubImage biz_glInvalidateTexSubImage
extern BizOGL::GLFunctor<void (GLuint texture, GLint level)> biz_glInvalidateTexImage;
#define glInvalidateTexImage biz_glInvalidateTexImage
extern BizOGL::GLFunctor<void (GLuint buffer, GLintptr offset, GLsizeiptr length)> biz_glInvalidateBufferSubData;
#define glInvalidateBufferSubData biz_glInvalidateBufferSubData
extern BizOGL::GLFunctor<void (GLuint buffer)> biz_glInvalidateBufferData;
#define glInvalidateBufferData biz_glInvalidateBufferData
extern BizOGL::GLFunctor<void (GLenum target, GLsizei numAttachments, const GLenum *attachments)> biz_glInvalidateFramebuffer;
#define glInvalidateFramebuffer biz_glInvalidateFramebuffer
extern BizOGL::GLFunctor<void (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)> biz_glInvalidateSubFramebuffer;
#define glInvalidateSubFramebuffer biz_glInvalidateSubFramebuffer
extern BizOGL::GLFunctor<void (GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride)> biz_glMultiDrawArraysIndirect;
#define glMultiDrawArraysIndirect biz_glMultiDrawArraysIndirect
extern BizOGL::GLFunctor<void (GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride)> biz_glMultiDrawElementsIndirect;
#define glMultiDrawElementsIndirect biz_glMultiDrawElementsIndirect
extern BizOGL::GLFunctor<void (GLuint program, GLenum programInterface, GLenum pname, GLint *params)> biz_glGetProgramInterfaceiv;
#define glGetProgramInterfaceiv biz_glGetProgramInterfaceiv
extern BizOGL::GLFunctor<GLuint (GLuint program, GLenum programInterface, const GLchar *name)> biz_glGetProgramResourceIndex;
#define glGetProgramResourceIndex biz_glGetProgramResourceIndex
extern BizOGL::GLFunctor<void (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)> biz_glGetProgramResourceName;
#define glGetProgramResourceName biz_glGetProgramResourceName
extern BizOGL::GLFunctor<void (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei count, GLsizei *length, GLint *params)> biz_glGetProgramResourceiv;
#define glGetProgramResourceiv biz_glGetProgramResourceiv
extern BizOGL::GLFunctor<GLint (GLuint program, GLenum programInterface, const GLchar *name)> biz_glGetProgramResourceLocation;
#define glGetProgramResourceLocation biz_glGetProgramResourceLocation
extern BizOGL::GLFunctor<GLint (GLuint program, GLenum programInterface, const GLchar *name)> biz_glGetProgramResourceLocationIndex;
#define glGetProgramResourceLocationIndex biz_glGetProgramResourceLocationIndex
extern BizOGL::GLFunctor<void (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)> biz_glShaderStorageBlockBinding;
#define glShaderStorageBlockBinding biz_glShaderStorageBlockBinding
extern BizOGL::GLFunctor<void (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)> biz_glTexBufferRange;
#define glTexBufferRange biz_glTexBufferRange
extern BizOGL::GLFunctor<void (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)> biz_glTexStorage2DMultisample;
#define glTexStorage2DMultisample biz_glTexStorage2DMultisample
extern BizOGL::GLFunctor<void (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)> biz_glTexStorage3DMultisample;
#define glTexStorage3DMultisample biz_glTexStorage3DMultisample
extern BizOGL::GLFunctor<void (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)> biz_glTextureView;
#define glTextureView biz_glTextureView
extern BizOGL::GLFunctor<void (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)> biz_glBindVertexBuffer;
#define glBindVertexBuffer biz_glBindVertexBuffer
extern BizOGL::GLFunctor<void (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)> biz_glVertexAttribFormat;
#define glVertexAttribFormat biz_glVertexAttribFormat
extern BizOGL::GLFunctor<void (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)> biz_glVertexAttribIFormat;
#define glVertexAttribIFormat biz_glVertexAttribIFormat
extern BizOGL::GLFunctor<void (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)> biz_glVertexAttribLFormat;
#define glVertexAttribLFormat biz_glVertexAttribLFormat
extern BizOGL::GLFunctor<void (GLuint attribindex, GLuint bindingindex)> biz_glVertexAttribBinding;
#define glVertexAttribBinding biz_glVertexAttribBinding
extern BizOGL::GLFunctor<void (GLuint bindingindex, GLuint divisor)> biz_glVertexBindingDivisor;
#define glVertexBindingDivisor biz_glVertexBindingDivisor
extern BizOGL::GLFunctor<void (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)> biz_glDebugMessageControl;
#define glDebugMessageControl biz_glDebugMessageControl
extern BizOGL::GLFunctor<void (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)> biz_glDebugMessageInsert;
#define glDebugMessageInsert biz_glDebugMessageInsert
extern BizOGL::GLFunctor<void (GLDEBUGPROC callback, const void *userParam)> biz_glDebugMessageCallback;
#define glDebugMessageCallback biz_glDebugMessageCallback
extern BizOGL::GLFunctor<GLuint (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)> biz_glGetDebugMessageLog;
#define glGetDebugMessageLog biz_glGetDebugMessageLog
extern BizOGL::GLFunctor<void (GLenum source, GLuint id, GLsizei length, const GLchar *message)> biz_glPushDebugGroup;
#define glPushDebugGroup biz_glPushDebugGroup
extern BizOGL::GLFunctor<void (void)> biz_glPopDebugGroup;
#define glPopDebugGroup biz_glPopDebugGroup
extern BizOGL::GLFunctor<void (GLenum identifier, GLuint name, GLsizei length, const GLchar *label)> biz_glObjectLabel;
#define glObjectLabel biz_glObjectLabel
extern BizOGL::GLFunctor<void (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label)> biz_glGetObjectLabel;
#define glGetObjectLabel biz_glGetObjectLabel
extern BizOGL::GLFunctor<void (const void *ptr, GLsizei length, const GLchar *label)> biz_glObjectPtrLabel;
#define glObjectPtrLabel biz_glObjectPtrLabel
extern BizOGL::GLFunctor<void (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label)> biz_glGetObjectPtrLabel;
#define glGetObjectPtrLabel biz_glGetObjectPtrLabel
extern BizOGL::GLFunctor<void (GLenum pname, void **params)> biz_glGetPointerv;
#define glGetPointerv biz_glGetPointerv

#endif
